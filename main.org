
#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction
Set credentials
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC

Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

#+RESULTS:
: t

* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)
* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'gruber-darker t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 130
                    :weight 'normal
                    :width 'normal)
#+END_SRC

* Evil mode
Vim users mode
** Setup
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC
For normal control - U
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC

#+RESULTS:
: evil-scroll-up

* Ivy
** Setup
#+BEGIN_SRC emacs-lisp
  (require 'ivy)
  (ivy-mode 1)
#+END_SRC

#+RESULTS:
: t

** Settings
TODO: No output
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

* Counsel
** Settings
TODO: No output
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'counsel-M-x)
#+END_SRC

#+RESULTS:
: counsel-M-x

* Yas
** Settings
TODO: No output
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (setq yas-snippet-dirs
    '(
       "~/.emacs.d/snippets"                 ;; personal snippets
   ))

  (yas-global-mode 1)
#+END_SRC
* Winum
#+BEGIN_SRC emacs-lisp
 (require 'winum)
 (winum-mode)
#+END_SRC
* Eyebrowse
#+BEGIN_SRC emacs-lisp
 (require 'eyebrowse)
 (eyebrowse-mode)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
 (require 'magit)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
 (require 'evil-magit)
#+END_SRC

* Python
** Elpy
*** Setup
#+BEGIN_SRC emacs-lisp
  (require 'elpy)
  (elpy-enable)
#+END_SRC
**** Interpreter
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+RESULTS:
: -i --simple-prompt

**** Rgrep
#+BEGIN_SRC emacs-lisp
  (require 'elpy)
   (eval-after-load 'python 
                    '(define-key evil-normal-state-map (kbd "<SPC> r") 'elpy-rgrep-symbol))

#+END_SRC

**** Go to definition
#+BEGIN_SRC emacs-lisp
  (require 'elpy)
   (eval-after-load 'python 
                    '(define-key evil-normal-state-map (kbd "g d") 'elpy-goto-definition))

#+END_SRC

**** Repl
#+BEGIN_SRC emacs-lisp
  (require 'elpy)
   (eval-after-load 'python 
                    '(define-key evil-normal-state-map (kbd "<SPC> m R") 'elpy-shell-switch-to-shell))
   (eval-after-load 'python 
                    '(define-key evil-normal-state-map (kbd "<SPC> m b") 'elpy-shell-send-region-or-buffer))
   (eval-after-load 'python 
                    '(define-key evil-visual-state-map (kbd "<SPC> m r") 'elpy-shell-send-region-or-buffer))

#+END_SRC

#+RESULTS:
: elpy-shell-send-region-or-buffer

* Keybindings
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (define-key evil-normal-state-map (kbd "<SPC> b") 'ivy-switch-buffer)
  (define-key evil-normal-state-map (kbd "<SPC> f") 'counsel-find-file)
  (define-key evil-normal-state-map (kbd "<SPC> s") 'swiper)
  (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
  (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
  (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
  (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
  (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
  (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)
  (define-key evil-normal-state-map (kbd "<SPC> l 0") 'eyebrowse-switch-to-window-config-0)
  (define-key evil-normal-state-map (kbd "<SPC> l 1") 'eyebrowse-switch-to-window-config-1)
  (define-key evil-normal-state-map (kbd "<SPC> l 2") 'eyebrowse-switch-to-window-config-2)
  (define-key evil-normal-state-map (kbd "<SPC> l 3") 'eyebrowse-switch-to-window-config-3)
  (define-key evil-normal-state-map (kbd "<SPC> l 4") 'eyebrowse-switch-to-window-config-4)
  (define-key evil-normal-state-map (kbd "<SPC> l 5") 'eyebrowse-switch-to-window-config-5)
  (define-key evil-normal-state-map (kbd "<SPC> l 6") 'eyebrowse-switch-to-window-config-6)
  (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status))
#+END_SRC

#+RESULTS:
: magit-status

** Quit minibuffer by press 1 escape 
#+BEGIN_SRC emacs-lisp
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ; (define-key swiper-map (kbd "<escape>") 'minibuffer-keyboard-quit)
#+END_SRC




* DONE Ace: Not interesting.
* DONE check spacemacs:  get winum
* DONE eye browse
* DONE mv between windows: winump
* TODO magit
* TODO my functions
* TODO no result in org
* TODO ve python
* TODO lisp mode
