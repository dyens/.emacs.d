#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* COMMENT This is code is commented so should not be executed in intialization
#+BEGIN_SRC emacs-lisp :results output silent
(setq dy-aaa "123")
#+END_SRC

* Introduction

Deffered compilation
https://masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation

#+BEGIN_SRC emacs-lisp :results output silent
(setq comp-deferred-compilation t)
#+END_SRC

Set credentials
#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC

Disable beep
#+BEGIN_SRC emacs-lisp :results output silent
(setq ring-bell-function 'ignore)
#+END_SRC

Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

Base settings
#+BEGIN_SRC emacs-lisp :results output silent
;; Scrolling
(setq mouse-wheel-scroll-amount '(1)    ; scroll gentle
      mouse-wheel-progressive-speed nil ; don't accelerate
      scroll-conservatively 101         ; don't jump to the middle of screen
      hscroll-margin 1                  ; don't you scroll that early!
      hscroll-step 1                    ; but scroll just a bit
      scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp :results output silent
(customize-set-variable 'display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+END_SRC

Search for non ascii characters
https://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html
#+BEGIN_SRC emacs-lisp :results output silent
  (setq search-default-mode #'char-fold-to-regexp)
#+END_SRC

Warning level
#+BEGIN_SRC emacs-lisp :results output silent
(setq warning-minimum-level :emergency)
#+END_SRC
* LSP
#+BEGIN_SRC emacs-lisp :results output silent
;; For LSP performance
(setq read-process-output-max (* 1024 1024))
#+END_SRC
* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

* Use spaces instead of tabs
#+BEGIN_SRC emacs-lisp :results output silent
(setq-default indent-tabs-mode nil)
#+END_SRC

* Global keys
#+BEGIN_SRC emacs-lisp :results output silent
(keymap-global-set "C-x C-p" 'eval-print-last-sexp)
#+END_SRC

* Display fill column indicator
#+BEGIN_SRC emacs-lisp :results output silent
(global-display-fill-column-indicator-mode)
(setq fill-column 80)
#+END_SRC
* Displaying buffers
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'display-buffer-alist
             (cons "\\`\\*compilation\\*\\'"
                   (cons 'display-buffer-reuse-window
                         '((reusable-frames . visible)
                           (inhibit-switch-frame . nil)))))
#+END_SRC

* Backup
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are
the files ending in ~ that are cluttering up your directory lists. The
following code stashes them all in ~/.emacs.d/backups, where I can
find them with C-x C-f (find-file) if I really need to.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* World time
#+BEGIN_SRC emacs-lisp :results output silent
(custom-set-variables
 '(zoneinfo-style-world-list
   '(("Etc/UTC" "ITC")
     ("Europe/Moscow" "Moscow")
     ("Asia/Irkutsk" "Irkutsk")
     ("America/New_York" "New York")
     )))
#+END_SRC

* History
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are
the files ending in ~ that are cluttering up your directory lists. The
following code stashes them all in ~/.emacs.d/backups, where I can
find them with C-x C-f (find-file) if I really need to.
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode -1)
#+END_SRC

** Fix gaps in DWM
#+BEGIN_SRC emacs-lisp :results output silent
  (setq frame-resize-pixelwise t)
#+END_SRC
** Column number mode
#+BEGIN_SRC emacs-lisp :results output silent
;(setq column-number-mode t) ;; show columns in addition to rows in mode line
#+END_SRC

** Paren mode
#+BEGIN_SRC emacs-lisp :results output silent
  (show-paren-mode)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :results output silent

;;(use-package color-theme-sanityinc-tomorrow
;;  :ensure t
;;  :config
;;  (color-theme-sanityinc-tomorrow-night))

;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox t))
;; (load-theme 'wombat t)
;; (load-theme 'deeper-blue t)

;;  (use-package apropospriate-theme
;;    :ensure t
;;    :config 
;;    (load-theme 'apropospriate-dark t)
;;    ;; or
;;    ;; (load-theme 'apropospriate-light t)
;;  )

  ;;  (use-package modus-operandi-theme
  ;;    :ensure t)
  ;;
  ;; (use-package modus-vivendi-theme
  ;; :ensure t)
  ;;
  ;;  (load-theme 'modus-operandi t)           ; Light theme
   ;; (load-theme 'apropospriate-dark t)
   ;; (global-hl-line-mode t)



;;(use-package kaolin-themes
;;  :ensure t
;;  :config 
;;  (load-theme 'kaolin-light t))

;; BEST!!!!
;; (load-theme 'dichromacy t)

;; (use-package ef-themes
;;   :ensure t
;;   :config
;;   (load-theme 'ef-day t)
;; )

;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox-light-medium t)
;; )

(defun dy-modus-theme () 
  (setq modus-themes-italic-constructs t
      modus-themes-region '(bg-only)
      modus-themes-bold-constructs t
      modus-themes-syntax '( faint yellow-comments green-strings alt-syntax)
      modus-themes-paren-match '(bold intense underline)
      modus-themes-mode-line '(accented borderless)
      )
  ;; dark theme
   (load-theme 'modus-operandi t)
   )
;; (dy-modus-theme)


  ;; My default theme
(defun dy-light-theme ()
    (scroll-bar-mode 0)
    (fringe-mode 0)

    (set-face-attribute 'mode-line nil :box nil)
    (set-face-attribute 'mode-line-inactive nil :box nil)

    (set-face-attribute 'mode-line nil :background "#c6edf9")
    (set-face-attribute 'mode-line-inactive nil :background "#FAFAFA")

    (set-face-background 'vertical-border "gray")
    (set-face-foreground 'vertical-border (face-background 'vertical-border)))

 ;; (dy-light-theme)


    ; (load-theme 'ef-deuteranopia-light t)
    ; (load-theme 'ef-cyprus t)

    ; (load-theme 'adwaita t)
    ; (load-theme 'gruvbox-dark-hard t)
    ;; (load-theme 'gruber-darker t)

    ; (load-theme 'dracula t)

    ; (require 'doom-themes)

    ;; Global settings (defaults)
    ; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;     doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    ; (load-theme 'whiteboard t)

    ;; Enable flashing mode-line on errors
    ; (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ; (doom-themes-neotree-config)
    ;; or for treemacs users
    ; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ; (doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
    ; (doom-themes-org-config)

(use-package ef-themes
  :ensure t
)

;; (load-theme 'leuven t)
(load-theme 'ef-maris-light t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Iosevka SS04"
                    :height 110
                    :weight 'medium
                    :width 'normal
)
#+END_SRC
** Winner mode
#+BEGIN_SRC emacs-lisp :results output silent
;; C-c left - undo
;; C-c rignt - redo
(winner-mode t)
#+END_SRC

* String-inflection
#+BEGIN_SRC emacs-lisp :results output silent
(use-package string-inflection
  :ensure t
)
#+END_SRC

* Perspective
#+BEGIN_SRC emacs-lisp :results output silent
(use-package perspective
  :ensure t
  :config
  (setq persp-suppress-no-prefix-key-warning t)
  (persp-mode)
)

(defun project-psersp-switch-project (project-to-switch)
)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp :results output silent

(setq evil-want-C-i-jump nil)
;; for work with abc_abc words
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  ;; Put a cursor to a new window
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  ;; Fix org tab key
  (setq evil-want-C-i-jump nil)
  :config 
  (evil-mode 1)
  ;; With new evil changes and new emacs evil use different undo systemes
  (evil-set-undo-system 'undo-redo)
  (keymap-set evil-normal-state-map "<f5>" #'modus-themes-toggle)

  ;; C-o defined for jump back
  ;; C-i for jump forward

  (keymap-set evil-normal-state-map "C-i" 'evil-jump-forward)
  (keymap-set evil-normal-state-map "<SPC> f" 'find-file)
  (keymap-set evil-normal-state-map "<SPC> b" 'switch-to-buffer)
  (keymap-set evil-normal-state-map "<SPC> I" 'consult-imenu)
  (keymap-set evil-normal-state-map "<SPC> s" 'consult-ripgrep)

  (keymap-set evil-normal-state-map "<SPC> w" 'ace-window)

  (keymap-set evil-normal-state-map "<SPC> g" 'magit-status)
  (keymap-set evil-normal-state-map "<SPC> a a" 'org-agenda)
  (keymap-set evil-normal-state-map "<SPC> a c" 'org-capture)

  (keymap-set evil-normal-state-map "<SPC> c" 'compile)

  (keymap-set evil-normal-state-map "<SPC> #" 'comment-line)
  (keymap-set evil-visual-state-map "<SPC> #" 'comment-line)

  (keymap-set evil-normal-state-map "C-u" 'evil-scroll-up)
  (keymap-set evil-visual-state-map "C-u" 'evil-scroll-up)

  (keymap-set evil-normal-state-map "<SPC> o" 'consult-outline)
  ;; Instead of C-u
  (keymap-set evil-normal-state-map "<SPC> u" 'universal-argument)
  (keymap-set evil-insert-state-map "C-l" 'yas-expand-from-trigger-key)

  (keymap-set evil-normal-state-map "<SPC> l" 'perspective-map)

  ;; Github jump
  (keymap-set evil-normal-state-map "<SPC> m b" 'dy-open-in-github-branch)
  (keymap-set evil-normal-state-map "<SPC> m B" 'dy-open-in-github-rev)

  (keymap-set evil-visual-state-map "<SPC> m b" 'dy-open-in-github-branch)
  (keymap-set evil-visual-state-map "<SPC> m B" 'dy-open-in-github-rev)

  ;; fast function
  (keymap-set evil-normal-state-map "<SPC> ~" 'dy-set-fast-function)
  (keymap-set evil-visual-state-map "<SPC> ~" 'dy-set-fast-function)

  (defun dy-function-not-found ()
    "Function is not find"
    (interactive)
  (error "Fast function is not defined: use dy-set-fast-function"))

  (keymap-set evil-normal-state-map "<SPC> `" 'dy-function-not-found)

  (defun dy-goto-next-error ()
    "Go to next error not depends from fly-* mode."
    (interactive)
    (cond
     ((and (symbolp flymake-mode) (symbol-value flymake-mode)) (flymake-goto-next-error))
     ((and (symbolp flycheck-mode) (symbol-value flycheck-mode)) (flycheck-next-error))
     (t (progn (message "no fly backend") nil))))

  (defun dy-goto-prev-error ()
    "Go to prev error not depends from fly-* mode."
    (interactive)
    (cond
     ((and (symbolp flymake-mode) (symbol-value flymake-mode)) (flymake-goto-prev-error))
     ((and (symbolp flycheck-mode) (symbol-value flycheck-mode)) (flycheck-previous-error))
     (t (progn (message "no fly backend") nil))))

  (keymap-set evil-normal-state-map "<SPC> ." 'dy-goto-next-error)
  (keymap-set evil-normal-state-map "<SPC> ," 'dy-goto-prev-error)
  )

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-string-inflection
  :after evil
  :ensure t
)

(use-package evil-escape
  :after evil
  :ensure t
  :config
  (setq-default evil-escape-key-sequence "fd")
  (evil-escape-mode 1))

#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp :results output silent
(use-package vertico
:ensure t
:init
(vertico-mode))
#+END_SRC
* Orderless
#+BEGIN_SRC emacs-lisp :results output silent
(use-package orderless
  :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion emacs22 basic)))))
#+END_SRC
* Savehist
#+BEGIN_SRC emacs-lisp :results output silent
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+END_SRC
* Marginalia
#+BEGIN_SRC emacs-lisp :results output silent
(use-package marginalia
  :ensure t
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+END_SRC

* Consult
#+BEGIN_SRC emacs-lisp :results output silent

;; TODO: remove this
;; This fix counsult error: void symbol without-restriction
(defmacro without-restriction (&rest rest)
  "Execute BODY without restrictions.

The current restrictions, if any, are restored upon return.

When the optional LABEL argument is present, the restrictions set
by `with-restriction' with the same LABEL argument are lifted.

\(fn [:label LABEL] BODY)"
  (declare (indent 0) (debug t))
  (if (eq (car rest) :label)
      `(save-restriction (internal--labeled-widen ,(cadr rest)) ,@(cddr rest))
    `(save-restriction (widen) ,@rest)))
 


(use-package consult
:ensure t
:config
(setq consult-preview-key nil)
(setq consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --with-filename --line-number --search-zip --hidden")
)
#+END_SRC

* Embark
#+BEGIN_SRC emacs-lisp :results output silent
(use-package embark
:ensure t
:bind
(("C-." . embark-act)
 ("C-h B" . embark-bindings)))

(use-package embark-consult
:after embark
:ensure t)
#+END_SRC
* Super-word-mode
For backward word and forwardword
#+BEGIN_SRC emacs-lisp :results output silent
  (superword-mode t)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
(use-package magit
  :ensure t
  :commands magit-status
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-traditional)
  ;; (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
  (defun dy-git-commit-setup ()
    (let ((current-branch-name (upcase (magit-get-current-branch))))
      (if (string-match-p (regexp-quote "WEBDEV") current-branch-name)
	  (let ((issue-number (format "WEBDEV%s" (cadr (split-string current-branch-name "WEBDEV")))))
	    (insert (format " %s\n\nhttps://zyrl.atlassian.net/browse/%s" issue-number issue-number))
	    (goto-char 0)
	    (evil-insert 0)))

      (if (string-match-p (regexp-quote "VTBCLOUD") current-branch-name)
	  (when (string-match "\\(VTBCLOUD-\[0-9\]+\\)-\\(.*\\)" current-branch-name)
	    (let ((issue-number (match-string 1 current-branch-name))
		  (default-commit-message (dy-capitalize-first-char (replace-regexp-in-string "-" " " (downcase (match-string 2 current-branch-name))))))
	      (insert (format "%s: %s\n" issue-number default-commit-message))
	      (evil-previous-line 1)
	      (evil-end-of-line)
	      (evil-visual-state 1)
              (evil-backward-char (- (length default-commit-message) 1))

	      ))
	)

      (if (string-match-p (regexp-quote "PCS") current-branch-name)
	  (when (string-match "\\(PCS-\[0-9\]+\\)-\\(.*\\)" current-branch-name)
	    (let ((issue-number (match-string 1 current-branch-name))
		  (default-commit-message (dy-capitalize-first-char (replace-regexp-in-string "-" " " (downcase (match-string 2 current-branch-name))))))
	      (insert (format "%s: %s\n" issue-number default-commit-message))
	      (evil-previous-line 1)
	      (evil-end-of-line)
	      (evil-visual-state 1)
              (evil-backward-char (- (length default-commit-message) 1))

	      ))
        )

      (if (string-match-p (regexp-quote "A2205190") current-branch-name)
	  (when (string-match "\\(A2205190-\[0-9\]+\\)-\\(.*\\)" current-branch-name)
	    (let ((issue-number (match-string 1 current-branch-name))
		  (default-commit-message (dy-capitalize-first-char (replace-regexp-in-string "-" " " (downcase (match-string 2 current-branch-name))))))
	      (insert (format "%s: %s\n" issue-number default-commit-message))
	      (evil-previous-line 1)
	      (evil-end-of-line)
	      (evil-visual-state 1)
              (evil-backward-char (- (length default-commit-message) 1))

	      ))
	)
      ))

  (add-hook 'git-commit-setup-hook 'dy-git-commit-setup))
#+END_SRC

* Forge
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package forge
;;   :after magit
;;   :ensure t
;;   :config
;;   ;; Add qs github acc
;;   (push 
;;     '("github.com-qs"
;;     "api.github.com"
;;     "github.com"
;;     forge-github-repository) forge-alist))
#+END_SRC

* Company-mode
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package company
;;   :ensure t
;;   :custom
;;   (company-begin-commands '(self-insert-command))
;;   (company-idle-delay 0.3)
;;   (company-minimum-prefix-length 1)
;;   (company-show-numbers nil)
;;   (company-tooltip-align-annotations 't)
;;   :config
;;   (add-hook 'after-init-hook 'global-company-mode)
;;   )
#+END_SRC

* Corfu (replace company mode)
#+BEGIN_SRC emacs-lisp :results output silent
(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

#+END_SRC

* Python
** PDB file view on debug in vterm
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-pdb-debug-shell-mode-hook ()
  (add-hook
   'comint-output-filter-functions
   'python-pdbtrack-comint-output-filter-function t))
(add-hook 'shell-mode-hook 'dy-pdb-debug-shell-mode-hook)
#+END_SRC
** Pyright
Pyright stop working in last version
TODO remove this in some future:
#+BEGIN_SRC emacs-lisp :results output silent
(setenv "PYRIGHT_PYTHON_FORCE_VERSION" "1.1.290")
#+END_SRC
** Yapfify
#+BEGIN_SRC emacs-lisp :results output silent
(use-package yapfify
  :ensure t
  :after python)
#+END_SRC
** Black
#+BEGIN_SRC emacs-lisp :results output silent
(use-package blacken
  :ensure t
  :after python)
#+END_SRC
** Ruff
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ruff-format
  :ensure t
  :after python
  :config
    (reformatter-define ruff-sort
      :program ruff-format-command
      :args (list "check" "--select" "I" "--stdin-filename" (or (buffer-file-name) input-file))
      :lighter "RuffSort"
      :group 'ruff-format)
)
#+END_SRC
** Pydoc
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pydoc
  :ensure t
  :after python)
#+END_SRC

** Python mode
#+BEGIN_SRC emacs-lisp :results output silent
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :config

  (setq python-indent-def-block-scale 1)
  (add-hook 'python-mode-hook 'dy-python-setup)
  (defun dy-python-setup ()
    ; Set max line length to 79 characters (from PEP8). (Although Emacs columns
    ; are 0-indexed, column-enforce-mode counts from 1, so we use 79 here and
    ; not 78.)
    (setq column-enforce-column 79)
    ; We need to tell Emacs to do paragrah-filling at 79 caharacters
    ; (column-enforce-mode only highlights regions --- it does not change how
    ; paragraph filling is done).
    (setq fill-column 79)
    ; (add-hook 'completion-at-point-functions
    ;           #'lsp-completion-at-point
    ;           'append)
))

#+END_SRC
** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pyvenv
  :ensure t
  :config

  (defun pyvenv-workon-local (&optional venv-dir-name)
    "Activate local environment"
    (interactive)
    (unless venv-dir-name(setq venv-dir-name ".venv"))
    (let ((activate-path (format "%s%s" (project-root (project-current)) venv-dir-name)))
      (pyvenv-activate activate-path)))

  (defun pipenvenv-old ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.virtualenvs")
    )

  (defun pipenvenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
    )
  (defun poetryenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
    )
  ;; default env
  (poetryenv)
  )
#+END_SRC

** Py-isrot
#+BEGIN_SRC emacs-lisp :results output silent
(use-package py-isort
  :ensure t
  )
#+END_SRC
** Remove font lock from python shell
#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-enable-font-lock nil)
#+END_SRC
** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pytest
    :ensure t
    :config
    (custom-set-variables '(pytest-project-root-files '("setup.py" ".hg" ".git")))
    )
#+END_SRC
** Pyenv mode 
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pyenv-mode
    :ensure t
    :config
    )
#+END_SRC
** DyPython
#+BEGIN_SRC emacs-lisp :results output silent
;; TODO if noqa exist - extend it
(defun dy-python-add-noqa()
  "Add noqa for error string"
  (interactive)
  (save-excursion
    (let* (
(error-string "")
           (noqa-mes (format "  # NOQA:%s" error-string)))
      (move-end-of-line nil)
      (insert noqa-mes)
      )))

(defun dy-python-add-type-ignore()
  "Add mypy ingore" 
  (interactive)
  (save-excursion
    (move-end-of-line nil)
    (insert "  # type: ignore")
    ))

#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (require 'python)
  ; for using string-trim
  (require 'subr-x)

  (defun dy-python-arg-params(arg-string)
    "Get python argument params from argument string (name, type, default)."
    (let* (
           (arg-value (split-string arg-string "[[:blank:]]*=[[:blank:]]*" t))
           (name-type-string (car arg-value))
           (name-type (split-string name-type-string "[[:blank:]]*:[[:blank:]]*" t))
           (name (car name-type))
           (type (nth 1 name-type))
           (default-value (nth 1 arg-value))
           )
      (list name type default-value)))

  (defun dy-python-split-args (arg-string)
    "Split a python argument string into ((name, type, default)..) tuples"
    (let* (
           (args (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t))
           (args (seq-filter (lambda (x) (not (string-blank-p x))) args))
           (args (mapcar 'string-trim args))
           (arg-values (mapcar 'dy-python-arg-params args))
           )
      arg-values))


  (defun dy-python-args-to-docstring (args-string identation)
    "return docstring format for the python arguments in yas-text"
    (let* (
           (args (dy-python-split-args args-string))
           (args (if (string= (nth 0 (car args)) "self")
                     (cdr args)
                   args))
           (ident (make-string identation ?\s))
           (format-arg (lambda (arg)
                         (concat
                          ident
                          ":param "
                          (nth 0 arg)
                          ": " (nth 0 arg)
                          (if (nth 2 arg) (concat ", default=" (nth 2 arg)))
                          (if (nth 1 arg) (concat
                                       "\n"
                                       ident
                                       ":type "
                                       (nth 0 arg)
                                       ": "
                                       (nth 1 arg)
                                       ))
                          )
                         )
                       )
           (formatted-params (mapconcat format-arg args "\n")))
      (unless (string= formatted-params "")
        (mapconcat 'identity
                   (list  formatted-params)
                   "\n"))))



  (defun dy-python-return-to-docstring (return-string identation)
    "return docstring format for the python return type"
    (let* (
           (return-type (car (split-string return-string "[[:blank:]]*->[[:blank:]]*" t)))
           (ident (make-string identation ?\s))
           (formated-return (format "%s:rtype: %s" ident return-type)))
      (unless (string= return-type "nil") formated-return)))


  (add-hook 'dy-python-mode-hook
            (lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))


(defun dy--python-add-docstring-to-function ($fname $fargs-string $docstring-shift)
  "Add docstring to function."
  (let ($fargs $docstring $docstring-header $docstring-args)
    (setq $docstring-header
	  (dy-capitalize-first-char (replace-regexp-in-string (regexp-quote "_") " " $fname)))

    (setq $fargs (dy-python-split-args $fargs-string))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (setq $docstring-header (format "\"\"\"%s." $docstring-header))
    (insert $docstring-header)
    (setq $fargs
	  (seq-filter (lambda (arg)
			 (let ((var-name (car arg)))
			       (and
				(not (string= "self" var-name))
				(not (string= "*" var-name))
				)))
		      $fargs))
    (message "%s" $fargs)
    (setq $docstring-args
      (mapcar
       (lambda (arg)
         (format ":param %s: %s"
    	     (car arg)
    	     (replace-regexp-in-string (regexp-quote "_") " " (car arg))))
       $fargs))
    (when $docstring-args
      (insert "\n")
      (dolist (arg $docstring-args)
    (insert "\n")
    (insert $docstring-shift)
    (insert arg))
      (insert "\n")
      (insert $docstring-shift)
      )
    (insert "\"\"\"")
  ))


(defun dy--python-add-docstring-to-class ($classname $docstring-shift)
  "Add docstring to class."
  (let ($classdocstring (case-fold-search nil))
    (message "%s" $classname)
    (setq $classdocstring (replace-regexp-in-string "\\([A-Z]\\)" " \\1" $classname))
    (setq $classdocstring (string-trim $classdocstring))
    (setq $classdocstring (downcase $classdocstring))
    (setq $classdocstring (dy-capitalize-first-char $classdocstring))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (insert "\"\"\"")
    (insert $classdocstring)
    (insert ".\"\"\"")
    ))

(defun dy-python-create-docstring ()
  "return docstring format for the python return type"
  (interactive)
    (python-nav-beginning-of-defun 1)
    ; jump to first now-whitespace symbol
    (back-to-indentation)
    (let* (
	  ($block-type (thing-at-point 'word))
	  ($block-start (current-column))
	  ($docstring-shift (make-string (+ 4 $block-start) 32))
	  )
      (cond
       ((string= $block-type "class")
	(let ($classname)
	  (re-search-forward
	   "[ \t]*class[ \t]*\\([a-zA-Z0-9_]+\\)" nil t)
	    (setq $classname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (dy--python-add-docstring-to-class $classname $docstring-shift)
	))
       ((string= $block-type "async")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*async[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n\*]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift)))
       ((string= $block-type "def")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n\*]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift))))))

  (defun dy-python-kwargs-to-dict ($start $end)
    "Convert kwargs arguments to dict.
     a=1, b=2 -> 'a': 1, 'b': 2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "\\([_0-9a-zA-Z]+\\)\s*=\s*" "'\\1': ")
         ))

  (defun dy-python-dict-to-kwargs ($start $end)
    "Convert dict arguments to kwargs.
     'a': 1, 'b': 2 -> a=1, b=2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "'\\([_0-9a-zA-Z]+\\)'\s*:\s*" "\\1=")
         ))


  (defun dy-python-dict-kwargs-toogle ($start $end)
    "Convert toogle dict kwargs args."
    (interactive "r")
    (if (seq-contains (buffer-substring $start $end) ?=)
        (dy-python-kwargs-to-dict $start $end)
      (dy-python-dict-to-kwargs $start $end)))

  (defun dy-py-split-string (&optional comma line-length)
    "Split string to multiple."
    (interactive)
    (unless comma (setq comma "'"))
    (unless line-length (setq line-length 70))
    (let (start (string-ended nil))
      (save-excursion
        (search-backward comma)
        (setq start (point))
        (insert "(\n")
        (indent-according-to-mode)
        (goto-char (+ 1(point)))
        (while (not string-ended)
  	(re-search-forward (format "[[:space:]%s]" comma))
  	(if (equal (buffer-substring-no-properties (match-beginning 0) (match-end 0)) " ")
  	    (if (>= (current-column) line-length)
  		(progn
  		(insert (format "%s\n%s" comma comma))
  		(indent-according-to-mode))
  	      )
  	  (setq string-ended 't)
  	  )
        )
        (insert "\n)")
        (indent-according-to-mode)
      )
    )
  )
 
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
;;  (use-package dap-mode
;;    :ensure t
;;  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
(defcustom dy-pytest-arguments "--disable-warnings -x --ff"
  "Pytest run arguments.")

(defun dy-pytest-one()
  (interactive)
  (pytest-one  dy-pytest-arguments)
  )

(defun dy-pytest-update-snapshot-one()
  (interactive)
  (let ((dy-pytest-arguments "--snapshot-update"))
    (pytest-one  dy-pytest-arguments)))

(defun dy-pytest-update-snapshot-all()
  (interactive)
  (let ((dy-pytest-arguments "--snapshot-update"))
    (pytest-all  dy-pytest-arguments)))

(defun dy-pytest-module()
  (interactive)
  (pytest-module  dy-pytest-arguments)
  )

(defun dy-pytest-all()
  (interactive)
  (pytest-all  dy-pytest-arguments)
  )

(defun dy-format-python-buffer()
  (interactive)
  (cond ((executable-find "ruff") (ruff-format-buffer) (ruff-sort-buffer))
        ((executable-find "black")
         (progn
           (blacken-buffer)
           (if executable-find "isort" (py-isort-buffer))))))


;; (add-hook 'python-mode-hook 'eglot-ensure)

(add-hook
 'python-mode-hook
 (lambda()
   (keymap-set evil-normal-state-local-map "<SPC> t" 'dy-pytest-one)
   (keymap-set evil-normal-state-local-map "<SPC> T a" 'dy-pytest-all)
   (keymap-set evil-normal-state-local-map "<SPC> T b" 'dy-pytest-module)
   (keymap-set evil-normal-state-local-map "<SPC> T p" 'pytest-pdb-one)
   (keymap-set evil-normal-state-local-map "<SPC> T T" 'pytest-again)
   (keymap-set evil-normal-state-local-map "<SPC> i" 'py-isort-buffer)
   (keymap-set evil-normal-state-local-map "<SPC> m d" 'dy-python-create-docstring)
   (keymap-set evil-visual-state-local-map "<SPC> m a" 'dy-python-dict-kwargs-toogle)
   (keymap-set evil-normal-state-local-map "<SPC> m i" 'dy-python-add-noqa)
   (keymap-set evil-normal-state-local-map "<SPC> m t" 'dy-python-add-type-ignore)
   (keymap-set evil-normal-state-local-map "<SPC> m s" 'dy-py-split-string)
   (keymap-set evil-normal-state-local-map "<SPC> =" 'dy-format-python-buffer)
   (keymap-set evil-normal-state-local-map "<SPC> m R" 'run-python)
   (keymap-set evil-visual-state-local-map "<SPC> m r" 'python-shell-send-region)
   (keymap-set evil-normal-state-local-map "<SPC> m b" 'python-shell-send-buffer)
   ))
#+END_SRC

* GO
#+BEGIN_SRC emacs-lisp :results output silent
(use-package go-mode
  :ensure t
  :config
  (add-hook 'go-mode-hook 'eglot-ensure)
  (add-hook
   'go-mode-hook
   (lambda()
     (keymap-set evil-normal-state-local-map "<SPC> t" 'go-test-current-test)
     (keymap-set evil-normal-state-local-map "<SPC> =" 'eglot-format-buffer)
))
  )
(use-package gotest
  :ensure t
  :config
  )

#+END_SRC

* Ansi-color
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ansi-color
    :ensure t
    :config 
    (defun colorize-compilation-buffer ()
      (ansi-color-apply-on-region compilation-filter-start (point)))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    )
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
#+END_SRC

* Project.el
#+BEGIN_SRC emacs-lisp :results output silent
(use-package project
  :config 
  (define-key project-prefix-map (kbd "C") 'dy-run-cmd)
  (keymap-set evil-normal-state-map "<SPC> p" project-prefix-map)
  )
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

* Docker-compose
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-compose-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent
(use-package org
  :ensure t
  :custom
  (shell-file-name "bash" "default shell is bash")
  (org-confirm-babel-evaluate nil "Eval withour confirm")
  (org-display-inline-images t)
  (org-redisplay-inline-images t)
  (org-startup-with-inline-images "inlineimages")
  (org-startup-folded t)
  (org-directory "~/org")
  ;; (org-agenda-files (list "agenda.org" "~/.org-jira"))
  (org-agenda-files (list "agenda.org"))
  (org-log-done 'time)
  ;; Remove tab useless source block identation
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  :config

  (defun dy-clear-image-cache ()
  "Clear cached images"
  (interactive)
  (clear-image-cache))

  (add-hook
   'org-mode-hook
   (lambda()
     (keymap-set evil-normal-state-local-map "<SPC> m f" 'dy-clear-image-cache)
     (setq org-file-apps (append '(
        ("drawio" . "drawio %s")
     ) org-file-apps ))
  ))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (emacs-lisp . t)
     (plantuml . t)
     (C . t)
     (mermaid . t)
     ))
  ; (use-package ob-translate
  ; :ensure t
  ; :config
  ; (org-babel-do-load-languages
  ;  'org-babel-load-languages
  ;  '((translate . t))))
  (setq org-clock-sound "~/.emacs.d/alarm.wav")
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (setq org-capture-templates
         '(("t" "Tasks" entry (file+headline "~/org/agenda.org" "Tasks")
  	  "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n" )
	   ("m" "Meetings" entry (file+headline "~/org/agenda.org" "Meetings")
  	  "* Meeting: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n%?" )
	   ("c" "Captures" entry (file+headline "~/org/agenda.org" "Captures")
  	  "* Capture %?\n%(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n%c" )
	   )
	 )
)

(use-package org-mime
  :ensure t
 )
 
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

(defcustom dy-pomodoro-timer nil
  "Pomodoro timer for agenda tasks")

(defun dy-clock-in ()
  "Clock in hook."
  (setq dy-pomodoro-timer
        (run-with-timer (* 60 20) (+ (* 60 20) 5) (lambda () (org-notify "Нужно отдохнуть 5 мин" "/home/dyens/.emacs.d/alarm.wav"))))
  )

(defun dy-clock-out ()
  "Clock out hook."
  (cancel-timer dy-pomodoro-timer)
  )

(add-hook 'org-clock-in-hook 'dy-clock-in)
(add-hook 'org-clock-out-hook 'dy-clock-out)
#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs  '(
                         "~/.emacs.d/snippets"                 ;; personal snippets
                         )
                       "Set yasnippet dir")
    :config
    (yas-global-mode 1)
  )
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp :results output silent
(use-package rust-mode
  :ensure t
  :custom
  (rust-format-on-save t "Format rust code on save")
  ;; (company-tooltip-align-annotations t "Company annotations")
  :mode ("\\rs\\'" . rust-mode)
  :config
  (add-hook 'rust-mode-hook 'eglot-ensure)
  ;; (add-hook 'rust-mode-hook #'lsp)
  ;; (keymap-set rust-mode-map "TAB" #'company-indent-or-complete-common)
)
#+END_SRC

** Rustic
#+BEGIN_SRC emacs-lisp :results output silent
(use-package rustic
  :ensure t
  :config
)
#+END_SRC

** Racer
#+BEGIN_SRC emacs-lisp :results output silent
;;  (use-package racer
;;    :ensure t
;;    :config
;;    (add-hook 'rust-mode-hook #'racer-mode)
;;    (add-hook 'racer-mode-hook #'eldoc-mode)
;;    (add-hook 'rust-mode-hook #'company-mode)
;;    (setq racer-rust-src-path "/home/dyens/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib")
;;  )
#+END_SRC

** Test at point
#+BEGIN_SRC emacs-lisp :results output silent
  (defun rust-test-buffer ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* (
          (relative-file (file-relative-name buffer-file-name (project-root (project-current))))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3))))
      (compile (format "%s test %s" rust-cargo-bin module-path))
    )
  )

  ;; Yes, i know. Its bullshit. It return first fn (name).
  ;; But for testing in general cases its ok.
  (defun rust-fname-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (save-excursion
      (re-search-backward
       "^[ \t]\\{0,4\\}\\(fn\\)[ \t]+\\([a-zA-Z0-9_]+\\)" nil t)
      (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
    )

  (defun rust-test-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* (
          (relative-file (file-relative-name buffer-file-name (project-root (project-current))))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3)))
          (fname (rust-fname-at-point))
          (test-module-name "tests"))
      (compile (format "%s test %s::%s::%s" rust-cargo-bin module-path test-module-name fname))
    )
  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook
 'rust-mode-hook
 (lambda()
   (keymap-set evil-normal-state-local-map "<SPC> m c" 'rust-run-clippy)
   (keymap-set evil-normal-state-local-map "<SPC> m C" 'rust-compile)
   (keymap-set evil-normal-state-local-map "<SPC> m r" 'rust-run)
   (keymap-set evil-normal-state-local-map "<SPC> T a" 'rust-test)
   ;; (keymap-set evil-normal-state-local-map "g d" 'racer-find-definition)
   (keymap-set evil-normal-state-local-map "<SPC> T b" 'rust-test-buffer)
   (keymap-set evil-normal-state-local-map "<SPC> =" 'lsp-format-buffer)
   (keymap-set evil-normal-state-local-map "<SPC> t" 'rust-test-at-point)
   ))
#+END_SRC

* Abbrev
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-setup-my-abbrev () 
  (clear-abbrev-table global-abbrev-table)

  (define-abbrev-table 'global-abbrev-table
    '(

      ;; net abbrev
      ("afaik" "as far as i know" )
      ))

  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table))

  (define-abbrev-table 'rust-mode-abbrev-table
    '(
      ("print" "println!(\"{:?}\", var);")
      ))



  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("ass" "assert")
      ("fr" "from")
      ("imp" "import")
      ("tr" "import pdb; pdb.set_trace()")
      ))

  (define-abbrev-table 'c++-mode-abbrev-table
    '(
      ("cls" "class A {
Public:
    A();
Private:
    int var;
}")
      ))


  ;; (define-abbrev c++-mode-abbrev-table "if"
  ;;   "" 'cpp-skeleton-if)

  (define-abbrev c++-mode-abbrev-table "fn"
    "" 'cpp-skeleton-fn)

  (define-abbrev c++-mode-abbrev-table "getter"
    "" 'cpp-skeleton-get)

  (define-abbrev c++-mode-abbrev-table "setter"
    "" 'cpp-skeleton-set)

  ;;(define-abbrev c++-mode-abbrev-table "for"
  ;;  "" 'cpp-skeleton-for)

  (define-abbrev c++-mode-abbrev-table "print"
    "" 'cpp-skeleton-print)

  (define-abbrev c++-mode-abbrev-table "cls"
    "" 'cpp-skeleton-cls)

  (define-abbrev c++-mode-abbrev-table "ns"
    "" 'cpp-skeleton-ns)

  (define-abbrev c++-mode-abbrev-table "maint"
    "" 'cpp-skeleton-main-t)

  (setq skeleton-end-hook nil)
  ;; (clear-abbrev-table c++-mode-abbrev-table)

  (define-skeleton cpp-skeleton-if
    "cpp-skeleton-if" nil
    "if (" _ ")"\n
    -2"{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-for
    "cpp-skeleton-for" nil
    "for (" _ ")"\n
    -2"{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-fn
    "cpp-skeleton-fn" nil
    "void " _ "()"\n
    -1"{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-get
    "cpp-skeleton-get" nil
    "[[nodiscard]] int get" _ "() const"\n
    -2"{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-set
    "cpp-skeleton-set" nil
    "void set" _ "() "\n
    -2"{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-print
    "cpp-skeleton-print" nil
    "std::cout << " _ " << std::endl;"\n
    )

  (define-skeleton cpp-skeleton-cls
    "cpp-skeleton-cls" nil
    "class " _  \n
    -1"{"\n
    -2"public:"\n
    -2"private:"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-ns
    "cpp-skeleton-ns" nil
    "namespace " _ "{"\n
    -2"}"\n
    )

  (define-skeleton cpp-skeleton-main-t
    "cpp-skeleton-main-t" nil
    "#include<iostream>" \n
    "#include<vector>" \n
    "#include<map>" \n
    "#include<memory>" \n
    \n
    "int main() {" \n
    > _ \n
    -2"}"\n
    )

  (set-default 'abbrev-mode t)

  (setq save-abbrevs nil)
  )

;;(dy-setup-my-abbrev )
#+END_SRC

* Tempel
#+BEGIN_SRC emacs-lisp :results output silent
(use-package tempel
:ensure t
:config
;; (global-tempel-abbrev-mode)
;; (set-default 'abbrev-mode t)
)
#+END_SRC
* Plantuml
#+BEGIN_SRC emacs-lisp :results output silent
(use-package plantuml-mode
  :ensure t
  :defer t
  :mode ("\\plantuml\\'" . plantuml-mode)
  :custom
  (plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
  (org-plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
  )
#+END_SRC

* Jira org

#+BEGIN_SRC emacs-lisp :results output silent
(defcustom dy-jira-host nil
   "jira host")


(use-package org-jira
  :ensure t
  :custom

  ;; (jiralib-url "https://jira.croc.ru/")
  ;; (org-jira-working-dir "~/.org-jira")
  ;; (dy-jira-host "jira.croc.ru")

  (jiralib-url "https://jira.t1-cloud.ru/")
  (org-jira-working-dir "~/.org-jira-vtb")
  (dy-jira-host "jira.t1-cloud.ru")

  :config
  (setq jiralib-token
      (cons "Authorization"
          (concat "Bearer " (auth-source-pick-first-password
              :host dy-jira-host))))
  )
#+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package expand-region
    :ensure t
    :config
    (keymap-set evil-normal-state-map "<SPC> e" 'er/expand-region)
    )
#+END_SRC
* Daemon
Need set in .zshrc 

alias em="emacsclient -c -a emacs"
#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
#+END_SRC

* Mail

#+BEGIN_SRC emacs-lisp :results output silent

  ;; First sudo dnf install maildir-utils
  ;; Setup mbrsync
  ;; Then init mu
  ;; mu init --maildir=~/mailbox --my-address=alexander.kapustin@quantumsoft.ru --my-address=akapustin@ambrahealth.com --my-address=dyens@mail.ru
  ;; mu index




  (defun dy-emails-set-all-as-read ()
    "Make all emails read."
    (interactive)
    (require 'mu4e-contrib)
    (with-temp-buffer
      (mu4e-headers-search-bookmark "flag:unread AND NOT flag:trashed")
      (sleep-for 0.15)
      (mu4e-headers-mark-all-unread-read)
      (mu4e-mark-execute-all 'no-confirmation)))

  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")


  (defun enter-mu4e-context-mail ()
    (setq mu4e-drafts-folder   "/mail/drafts"
          mu4e-sent-folder "/mail/sent"
          ;; mu4e-refile-folder  "/mail/[Gmail]/All Mail"
          mu4e-trash-folder  "/mail/trash"
          mu4e-maildir-shortcuts
          '((:maildir "/mail/inbox" :key ?i)
            (:maildir "/mail/sent"  :key ?s)
            (:maildir "/mail/trash" :key ?t))))

  (defun enter-mu4e-context-ambra ()
    (setq mu4e-drafts-folder   "/ambra/[Gmail]/Drafts"
          mu4e-sent-folder "/ambra/[Gmail]/Sent Mail"
          ;; mu4e-refile-folder  "/ambra/[Gmail]/All Mail"
          mu4e-trash-folder  "/ambra/[Gmail]/Trash"
          mu4e-maildir-shortcuts
          '((:maildir "/ambra/inbox" :key ?i)
            (:maildir "/ambra/[Gmail]/Sent Mail" :key ?s)
            (:maildir "/ambra/[Gmail]/Trash" :key ?t))))

  (defun enter-mu4e-context-quantumsoft ()
    (setq mu4e-drafts-folder   "/quantumsoft/[Gmail]/Drafts"
          mu4e-sent-folder "/quantumsoft/[Gmail]/Sent Mail"
          ;; mu4e-refile-folder  "/quantumsoft/[Gmail]/All Mail"
          mu4e-trash-folder  "/quantumsoft/[Gmail]/Trash"
          mu4e-maildir-shortcuts
          '((:maildir "/quantumsoft/inbox" :key ?i)
            (:maildir "/quantumsoft/[Gmail]/Sent Mail" :key ?s)
            (:maildir "/quantumsoft/[Gmail]/Trash" :key ?t))))

  (setq dy-mu4e-bookmarks-mail
        '(("maildir:/mail/inbox" "Inbox" ?i)
          ("flag:unread AND to:dyens@mail.ru" "Unread messages" ?u)
          ("date:today..now AND to:dyens@mail.ru" "Today's messages" ?t)
          ("date:7d..now AND to:dyens@mail.ru" "Last 7 days" ?w)
          ("mime:image/* AND to:dyens@mail.ru" "Messages with images" ?p)))


  (setq dy-mu4e-bookmarks-ambra
        '(("maildir:/ambra/inbox" "Inbox" ?i)
          ("flag:unread AND to:akapustin@ambrahealth.com" "Unread messages" ?u)
          ("date:today..now AND to:akapustin@ambrahealth.com" "Today's messages" ?t)
          ("date:7d..now AND to:akapustin@ambrahealth.com" "Last 7 days" ?w)
          ("mime:image/* AND to:akapustin@ambrahealth.com" "Messages with images" ?p)))


  (setq dy-mu4e-bookmarks-quantumsoft
        '(("maildir:/quantumsoft/inbox" "Inbox" ?i)
          ("flag:unread AND to:akapustin@quantumsofthealth.ru" "Unread messages" ?u)
          ("date:today..now AND to:akapustin@quantumsofthealth.ru" "Today's messages" ?t)
          ("date:7d..now AND to:akapustin@quantumsofthealth.ru" "Last 7 days" ?w)
          ("mime:image/* AND to:akapustin@quantumsofthealth.ru" "Messages with images" ?p)))


  ;; (setq mu4e-alert-mu4e-header-func-var  "A")
  (use-package mu4e-alert
      :ensure t
      :config
      (mu4e-alert-set-default-style 'libnotify)
      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
   )

  (use-package mu4e
    :ensure nil
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/mailbox")
    (setq mu4e-bookmarks dy-mu4e-bookmarks-mail)

    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials
          '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials
          (expand-file-name "~/.authinfo")
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t)

    (setq mu4e-contexts
          `(
           ;; Mail personal
           ,(make-mu4e-context
            :name "Mail"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/mail" (mu4e-message-field msg :maildir))))
            :vars `((user-mail-address . "dyens@mail.ru")
                    (smtpmail-starttls-credentials . '(("smtp.mail.com" 465 nil nil)))
                    (smtpmail-auth-credentials . (expand-file-name "~/.authinfo"))
                    (smtpmail-smtp-service . 465)
                      (smtpmail-smtp-user . "dyens@mail.ru")
                      (smtpmail-smtp-server . "smtp.mail.ru" )
                    (smtpmail-stream-type . ssl)
                    (mu4e-bookmarks . ,dy-mu4e-bookmarks-mail)
                    (user-full-name . "Kapustin Alexander"))
            :enter-func (lambda () (progn
                                (mu4e-message "Entering Mail Context")
                                (enter-mu4e-context-mail)))
            :leave-func (lambda () (mu4e-message "Leave Mail Context")))

           ;; Ambra work account
           ;; ,(make-mu4e-context
           ;;  :name "Ambra"
           ;;  :match-func
           ;;    (lambda (msg)
           ;;      (when msg
           ;;        (string-prefix-p "/ambra" (mu4e-message-field msg :maildir))))
           ;;  :vars `((user-mail-address . "akapustin@ambrahealth.com")
           ;;            (smtpmail-smtp-user . "akapustin@ambrahealth.com")
           ;;            (smtpmail-smtp-server . "smtp.gmail.com" )
           ;;          (mu4e-bookmarks . ,dy-mu4e-bookmarks-ambra)
           ;;          (user-full-name    . "Kapustin Alexander"))
           ;;  :enter-func (lambda () (progn
           ;;                      (mu4e-message "Entering Ambra Context")
           ;;                      (enter-mu4e-context-ambra)))
           ;;  :leave-func (lambda () (mu4e-message "Leave Ambra Context")))

           ;; Quantumsoft work account
           ,(make-mu4e-context
            :name "Quantumsoft"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/quantumsoft" (mu4e-message-field msg :maildir))))
            :vars `((user-mail-address . "alexander.kapustin@quantumsoft.ru")
                      (smtpmail-smtp-user . "alexander.kapustin@quantumsoft.ru")
                      (smtpmail-smtp-server . "smtp.gmail.com" )
                    (mu4e-bookmarks . ,dy-mu4e-bookmarks-quantumsoft)
                    (user-full-name    . "Kapustin Alexander"))
            :enter-func (lambda () (progn
                                (mu4e-message "Entering Quantumsoft Context")
                                (enter-mu4e-context-quantumsoft)))
            :leave-func (lambda () (mu4e-message "Leave Quantumsoft Context"))))))
#+END_SRC




#TODO https://github.com/emacs-evil/evil-collection
* Aspell
#+BEGIN_SRC emacs-lisp :results output silent
  (setq ispell-program-name "aspell")
#+END_SRC

* Dy surround
#+BEGIN_SRC emacs-lisp :results output silent
  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defconst dy-insert-pair-alist
    '(("' Single quote" . (39 39))           ; ' '
      ("\" Double quotes" . (34 34))         ; " "
      ("` Elisp quote" . (96 39))            ; ` '
      ("‘ Single apostrophe" . (8216 8217))  ; ‘ ’
      ("“ Double apostrophes" . (8220 8221)) ; “ ”
      ("( Parentheses" . (40 41))            ; ( )
      ("{ Curly brackets" . (123 125))       ; { }
      ("[ Square brackets" . (91 93))        ; [ ]
      ("< Angled brackets" . (60 62))        ; < >
      ("« tree brakets" . (171 187)))        ; « »
    "Alist of pairs for use with.")

  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defun dy-insert-pair-completion (&optional arg)
    "Insert pair from."
    (interactive "P")
    (let* ((data dy-insert-pair-alist)
           (chars (mapcar #'car data))
           (choice (completing-read "Select character: " chars nil t))
           (left (cadr (assoc choice data)))
           (right (caddr (assoc choice data))))
      (insert-pair arg left right)))

  (keymap-set evil-visual-state-map "<SPC> q" 'dy-insert-pair-completion)
#+END_SRC
* Dy capitalize first char
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC
* Dy prettify
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-json-pp ()
 "Prettify selected json"
 (interactive)
 (let ((p1 (region-beginning))
       (p2 (region-end)))
  (save-excursion
   (save-restriction
    (narrow-to-region p1 p2)
    (goto-char (point-min))
    (while (re-search-forward "'" nil t)
      (replace-match "\""))
    (call-shell-region (point-min) (point-max) "jq ." t (current-buffer))
    ))))


(defun dy-python-pp ()
 "Prettify selected python object"
 (interactive)
 (let ((p1 (region-beginning))
       (p2 (region-end)) cmd)
  (save-excursion
   (save-restriction
    (narrow-to-region p1 p2)
    (goto-char (point-min))
    (setq cmd (format "python -c \"import pprint; pprint.pp(%s)\""  (buffer-substring-no-properties (point-min) (point-max))))
(message cmd)
    (call-shell-region (point-min) (point-max) cmd t (current-buffer))
    ))))

#+END_SRC

* Google-translate
#+BEGIN_SRC emacs-lisp :results output silent
(use-package popup
    :ensure t
 )
(use-package google-translate
    :ensure t
    :custom
    (google-translate-backend-method 'curl)
    :config
    ;; https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
    (keymap-set evil-normal-state-map "<SPC> r r" 'dy-google-translate)
    (keymap-set evil-normal-state-map "<SPC> r R" 'dy-google-translate-reverse)

    (keymap-set evil-visual-state-map "<SPC> r r" 'dy-google-translate)
    (keymap-set evil-visual-state-map "<SPC> r R" 'dy-google-translate-reverse)

    (keymap-set evil-normal-state-map "<SPC> r q" 'google-translate-query-translate)
    (keymap-set evil-normal-state-map "<SPC> r Q" 'google-translate-query-translate-reverse)
    (setq google-translate-default-source-language "en")
    (setq google-translate-default-target-language "ru"))
#+END_SRC
* Smerge
** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'smerge-mode-hook
   (lambda()
     (keymap-set evil-normal-state-local-map "<SPC> j" 'smerge-next)
     (keymap-set evil-normal-state-local-map "<SPC> k" 'smerge-prev)
     (keymap-set evil-normal-state-local-map "<SPC> <SPC>" 'smerge-keep-current)
     (keymap-set evil-normal-state-local-map "<SPC> h" 'smerge-keep-other)
     (keymap-set evil-normal-state-local-map "<SPC> l" 'smerge-keep-mine)
     ))
#+END_SRC

* SLY
#+BEGIN_SRC emacs-lisp :results output silent
(use-package sly
  :ensure t)
#+END_SRC

* Tree sitter
#+BEGIN_SRC emacs-lisp :results output silent
(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
)
(use-package tree-sitter-langs
  :ensure t)
#+END_SRC

* Multiple Cursors
#+BEGIN_SRC emacs-lisp :results output silent
(use-package evil-multiedit
  :ensure t
  :config
  (require 'evil-multiedit)
  ;; Highlights all matches of the selection in the buffer.
  (keymap-set evil-visual-state-map "R" 'evil-multiedit-match-all)
  
  ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
  ;; incrementally add the next unmatched match.
  (keymap-set evil-normal-state-map "M-d" 'evil-multiedit-match-and-next)
  ;; Match selected region.
  (keymap-set evil-visual-state-map "M-d" 'evil-multiedit-match-and-next)
  ;; Insert marker at point
  (keymap-set evil-insert-state-map "M-d" 'evil-multiedit-toggle-marker-here)
   ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))

#+END_SRC

* Widnow monocle
https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
#+BEGIN_SRC emacs-lisp :results output silent
(use-package emacs
  :config
  (defvar dy-window-configuration nil
    "Current window configuration.
Intended for use by `dy-window-monocle'.")

  (define-minor-mode dy-window-single-toggle
    "Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'."
    :lighter " [M]"
    :global nil
    (if (one-window-p)
        (when dy-window-configuration
          (set-window-configuration dy-window-configuration))
      (setq dy-window-configuration (current-window-configuration))
      (delete-other-windows)))

  (keymap-set evil-normal-state-map "<SPC> z" 'dy-window-single-toggle)
)

#+END_SRC

* Zoom
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package zoom
;;   :ensure t
;;   :custom
;;   (zoom-mode t)
;;   :config
;;   (defun dy-size-callback ()
;;     (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
;;           (t                            '(0.5 . 0.5))))
;;   (setq zoom-size 'dy-size-callback))
#+END_SRC
* Lua
#+BEGIN_SRC emacs-lisp :results output silent
(use-package lua-mode
  :ensure t)
#+END_SRC

* Org Roam
#+BEGIN_SRC emacs-lisp :results output silent

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org_roam")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-setup))
#+END_SRC

* Compilation mode
** Truncate compilation buffer
If in compilation buffer there are many lines it start to be a very slow
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'compilation-filter-hook 'comint-truncate-buffer)
(setq comint-buffer-maximum-size 2000)
#+END_SRC

** Scroll to the first error
#+BEGIN_SRC emacs-lisp :results output silent
(setq compilation-scroll-output 'first-error)
#+END_SRC

** Notifications
#+BEGIN_SRC emacs-lisp :results output silent
(defcustom dy-notify-after-compilation nil "Notifcation after compilation" :type 'hook :options '(t nil) :group 'dy-settings)
(custom-set-variables '(dy-notify-after-compilation t))

(setq compilation-finish-functions
      (append compilation-finish-functions
          '(dy-local-notify-compilation-finish)))

(defcustom dy-compilation-notify nil
  "Non-nil means automatically frobnicate all buffers."
  :type 'boolean
  :require 'compilation-mode
  :group 'dy-custom)

(defun dy-local-notify-compilation-finish (buffer status)
  "Notify compilation finish."
  (if dy-notify-after-compilation
      (dy-notify "Compilation finished in Emacs" status)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp :results output silent
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom (
    (dired-listing-switches "-agho --group-directories-first")
    (dired-dwim-target t)
  )
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)

(setq dired-guess-shell-alist-user
      '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open")
        ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mplayer" "xdg-open")
		(".*" "xdg-open"))))



(use-package dired-single
  :ensure t)

(use-package dired-open
  :ensure t
  :config
  ;; Doesn't work as expected!
  ;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mp4" . "mplayer"))))

#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp :results output silent
;; From SystemCrafters
;; https://github.com/daviwil/emacs-from-scratch/blob/bbfbc77b3afab0c14149e07d0ab08d275d4ba575/Emacs.org#terminals
(defun dy-configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
 :ensure t
)

(use-package eshell
  :hook (eshell-first-time-mode . dy-configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vi")))

  (eshell-git-prompt-use-theme 'powerline)
)
#+END_SRC

* Vterm
#+BEGIN_SRC emacs-lisp :results output silent
(use-package vterm
  :ensure t
  :custom
  (vterm-shell "zsh")
)
#+END_SRC
* Multi-Vterm
#+BEGIN_SRC emacs-lisp :results output silent
(use-package multi-vterm
  :after vterm
  :ensure t)
#+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp :results output silent
(setq shell-file-name "zsh")
#+END_SRC

* C++
** Clang-Format
#+BEGIN_SRC emacs-lisp :results output silent
;; clang-format --style=google --dump-config > .clang-format 
(use-package clang-format
  :ensure t
)
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook
 'c++-mode-hook
 (lambda()
   (keymap-set evil-normal-state-map "<SPC> =" 'clang-format-buffer)
   (keymap-set evil-normal-state-map "<SPC> m d" 'dy-dox-fn)
   ))
#+END_SRC

** Ggtags
#+BEGIN_SRC emacs-lisp :results output silent

(use-package ggtags
  :ensure t
  :config
;; With lsp is good to use default evil go to definition
;; 
;;    (add-hook 'c-mode-common-hook
;;            (lambda ()
;;                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
;;                (ggtags-mode 1))))
  )

;; (keymap-set ggtags-mode-map "C-c g s" 'ggtags-find-other-symbol)
;; (keymap-set ggtags-mode-map "C-c g h" 'ggtags-view-tag-history)
;; (keymap-set ggtags-mode-map "C-c g r" 'ggtags-find-reference)
;; (keymap-set ggtags-mode-map "C-c g f" 'ggtags-find-file)
;; (keymap-set ggtags-mode-map "C-c g c" 'ggtags-create-tags)
;; (keymap-set ggtags-mode-map "C-c g u" 'ggtags-update-tags)
;; 
;; (keymap-set ggtags-mode-map "M-," 'pop-tag-mark)
#+END_SRC
** Cmake
#+BEGIN_SRC emacs-lisp :results output silent
(use-package cmake-mode
  :ensure t
  )
#+END_SRC

* RG
#+BEGIN_SRC emacs-lisp :results output silent
(use-package rg
  :ensure t)
#+END_SRC
* Telega
#+BEGIN_SRC emacs-lisp :results output silent
(use-package telega
  :ensure t)
#+END_SRC

* Ace window
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ace-window
  :ensure t)
#+END_SRC

* Dap mode
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package dap-mode
;;   :ensure t
;;   :config
;;     )
#+END_SRC

* Dape
#+BEGIN_SRC emacs-lisp :results output silent
(use-package dape
  :ensure t
  :config
(add-to-list 'dape-configs
 `(debugpy-remote-attach-port
   modes (python-mode python-ts-mode)
   host (lambda () (read-string "Host: " "127.0.0.1"))
   port (lambda () (read-number "Port:" 5678))
   :request "attach"
   :type "python"
   :pathMappings [(:localRoot (lambda ()
                                (read-directory-name "Local source directory: "
                                                     (funcall dape-cwd-fn)))
                   :remoteRoot (lambda ()
                                 (read-string "Remote source directory: ")))]
   :justMyCode nil
   :showReturnValue t))

;; (setq dape-configs (cdr dape-configs))

;; (add-to-list 'dape-configs
;;              `(debugpy
;;                modes (python-ts-mode python-mode)
;;                command "python"
;;                command-args ("-m" "debugpy.adapter")
;;                :type "executable"
;;                :request "launch"
;;                :cwd dape-cwd-fn
;;                :program dape-find-file-buffer-default))
;;     )
#+END_SRC

* Lispy
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package lispy
;;   :ensure t
;;   :config
;;     )
;; 
;; (use-package evil-lispy
;;   :ensure t
;;   :config
;;     )
#+END_SRC
* Nov (epub reading)
#+BEGIN_SRC emacs-lisp :results output silent
(use-package nov
  :ensure t
  :config
   (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    )
#+END_SRC
* PDF
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install))
#+END_SRC

* Paredit
#+BEGIN_SRC emacs-lisp :results output silent
(use-package paredit
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  ;; enable in the *scratch* buffer
  (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
  (add-hook 'ielm-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook #'paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
  ;; (add-hook 'c++-mode-hook #'paredit-mode)
  ;; (add-hook 'c-mode-hook #'paredit-mode)
  ;; (add-hook 'python-mode-hook #'paredit-mode)
    )
#+END_SRC
* Vue
#+BEGIN_SRC emacs-lisp :results output silent
(use-package vue-mode
  :ensure t
  :config
  (setq js-indent-level 2)
  (setq css-indent-offset 2)
)
#+END_SRC
* Run command
#+BEGIN_SRC emacs-lisp :results output silent
(use-package run-command
  :ensure t
)

(defun run-command-recipe-example ()
  (list
   ;; Run a simple command
   (list :command-name "say-hello"
         :command-line "echo Hello, World!")))
(setq run-command-recipes '(run-command-recipe-example))
#+END_SRC
* Kubernetes
#+BEGIN_SRC emacs-lisp :results output silent
(use-package kubernetes
  :ensure t
)

(use-package kubernetes-evil
  :ensure t
  :after kubernetes)
#+END_SRC
* Terraform
#+BEGIN_SRC emacs-lisp :results output silent
(use-package terraform-mode
  :ensure t
)
#+END_SRC

* Dy
#+BEGIN_SRC emacs-lisp :results output silent

(defun dy-run-cmd (cmd)
  "Run command defined in dy-project-commands"
  (interactive (list (completing-read "CMD: " dy-project-commands)))
  (let ((default-directory (project-root (project-current t)))
        (compilation-buffer-name-function
         (or project-compilation-buffer-name-function
             compilation-buffer-name-function)))
    (compile cmd))
)

(defun dy-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun dy-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the 
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir)
          (dy-reload-dir-locals-for-current-buffer))))))

(defun dy-erc ()
  "Run erc. Default erc does not work."
  (interactive)
   (erc :server "irc.libera.chat" :full-name "Alexander Kapustin" :user "dyens")
 )

(defun dy-notify (text &optional body)
  "Desktop notify.

  After next building emacs (build with bus) use:
      (notifications-notify :text \"test\")
  "
  (interactive)
  (unless body (setq body ""))
  (call-process "notify-send" nil nil nil
		"-t" "5000"
		"-i" "emacs"
		text
		body)

  (play-sound-file "/home/dyens/.emacs.d/alarm.wav")
)

(defun dy-screaming-to-camel (s)
  "Convert screaming to camel case.
  Example:
      HELLO_WORLD -> HelloWorld
  " 
  (mapconcat 'capitalize (split-string s "_") ""))

(defun dy-set-fast-function (fn_name)
  "Set some function on <SPC> ` in evil normal state map."
  (interactive "aBind function name: ")
  (keymap-set evil-normal-state-map "<SPC> `" fn_name)
  )

;; https://protesilaos.com/codelog/2021-07-24-emacs-misc-custom-commands/
;; A variant of this is present in the crux.el package by Bozhidar
;; Batsov.
(defun dy-rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t)))


(defun dy-google-translate ()
  (interactive)
  (let* ((langs (google-translate-read-args nil nil))
         (source-language (car langs))
         (target-language (cadr langs))
	 (p1 (region-beginning))
	 (p2 (region-end)))
    (if (use-region-p)
	(google-translate-translate
	 source-language target-language
	 (buffer-substring-no-properties p1 p2))
      (google-translate-at-point))))


(defun dy-google-translate-reverse ()
  (interactive)
  (let* ((langs (google-translate-read-args nil nil))
         (source-language (cadr langs))
         (target-language (car langs))
	 (p1 (region-beginning))
	 (p2 (region-end)))
    (if (use-region-p)
	(google-translate-translate
	 source-language target-language
	 (buffer-substring-no-properties p1 p2))
      (google-translate-at-point-reverse))))




(defun dy-include-cpp-header ()
  "Include cpp header."
  (interactive)
  (save-excursion
    (let ((bname (replace-regexp-in-string "[.]" "_" (string-inflection-upcase-function (buffer-name)))))
      (goto-char (point-min))
      (insert (format "#ifndef %s\n#define %s\n\n" bname bname))
      (goto-char (point-max))
      (insert (format "\n#endif //%s" bname)))))


(defun dy-get-git-origin-url ()
  "Return current git origin url"
  (let ((url (magit-git-output "config" "--get" "remote.origin.url")))
    (cond
     ((string-match "git@\\(.*\\):\\(.*\\)\.git" url) (format "https://%s/%s" (match-string 1 url) (match-string 2 url)))
     ((string-match "\\(.*\\)\.git" url) (match-string 1 url) )
     (t (error "Can not detect origin"))
     )))


(defun dy-open-in-github (github-url  &optional mode)
  "Open source file in github."
  (interactive)
  (let (
	(github-url (if (null github-url) (dy-get-git-origin-url) (github-url)))
	(github-path
	 (cond
	  ((eq mode nil) (magit-get-current-branch))
	  ((eq mode 'dev) "dev")
	  ((eq mode 'branch) (magit-get-current-branch))
	  ((eq mode 'rev) (magit-rev-abbrev "HEAD"))))

	(project-file (magit-file-relative-name ( buffer-file-name)) )
	(highlight
	 (if (use-region-p)
             (let ((l1 (line-number-at-pos (region-beginning)))
                   (l2 (line-number-at-pos (- (region-end) 1))))
               (format "#L%d-L%d" l1 l2))
           ""))
	(url))
    (setq url (format "%s/blob/%s/%s%s" github-url github-path project-file highlight))
    (shell-command (concat "firefox " url))))

(defun dy-open-in-github-branch()
    (interactive)
    (dy-open-in-github nil 'branch))

(defun dy-open-in-github-rev()
    (interactive)
    (dy-open-in-github nil 'rev))

(defun dy-args-to-attributes ()
  "Add class attributes from method args."
  (interactive)
  (save-excursion
    (re-search-backward "def \\([a-zA-Z0-9_]*\\)(\\([a-zA-Z0-9 \n\t_,]*\\)):")
    (let* ((args-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	   (args (mapcar 's-trim  (s-split ","  args-string)))
	   (not-self-args (cdr args)))
      
      (search-forward ":")
      (mapc (lambda (arg)
	      (if (not (= (length arg) 0 ))
		  (progn
		    (evil-open-below 0)
		    (insert (format "self._%s = %s" arg arg))
		    (evil-normal-state)
		    ))
	      )
	    not-self-args))))

;; Usefull function for template subs
(defun dy-template-sub ()
  (interactive)
  (let ((tmpl "
if %aExists && vm2.Initialization().%b() != %a {
	t.Fatalf(\"got Unexpected output from the %b (%%s) init field \", vm2.Initialization().%b())
}
  ")
  (var (thing-at-point 'word 'no-properties))
  (current (point))
  )
  (goto-char (point-max))
  (insert (format-spec tmpl `((?a . ,var) (?b . ,(upcase-initials var)))))
  (goto-char current)
  ))

#+END_SRC

* Linux sys calls
#+BEGIN_SRC emacs-lisp :results output silent

;; sudo tail -n 0 -f /var/log/messages > audit.txt
;; :v/SECC/d - filter only seccomp messages
;; sed -e 's/.*syscall=\(.*\) compat.*/\1/g' audit.txt | sort | uniq > audit_keys.txt
;; 
;; sed -e '/syscall/!d'   -e 's/.*syscall=\(.*\) compat.*/\1/g' dev1 | sort |uniq
;; scp ai.json root@ai-dev1:/var/lib/kubelet/seccomp/ai.json


(defun dy-add-syscal-names ()
  "Add syscall names for numbers
    from 
      0
      1
      10
    to
      0 sys_read
      1 sys_write
      10 sys_mprotect
   "
  (interactive)
  (let* (
	 (start (region-beginning))
	 (end (region-end))
	 (syscalls-string (buffer-substring start end))
	 (syscalls (read (format "(%s)" syscalls-string)))
	 )
    (delete-region start end)
    (mapc
     (lambda (x)
       (insert (format "%s %s" x (gethash x linux-sys-calls) ) )
       (newline)
       )
     syscalls
     )))



;; from /linux/arch/x86/entry/syscalls/syscall_64.tbl
(setq linux-sys-calls
      #s(hash-table test equal data(
		     0 "sys_read"
		     1 "sys_write"
		     2 "sys_open"
		     3 "sys_close"
		     4 "sys_newstat"
		     5 "sys_newfstat"
		     6 "sys_newlstat"
		     7 "sys_poll"
		     8 "sys_lseek"
		     9 "sys_mmap"
		     10 "sys_mprotect"
		     11 "sys_munmap"
		     12 "sys_brk"
		     13 "sys_rt_sigaction"
		     14 "sys_rt_sigprocmask"
		     15 "sys_rt_sigreturn"
		     16 "sys_ioctl"
		     17 "sys_pread64"
		     18 "sys_pwrite64"
		     19 "sys_readv"
		     20 "sys_writev"
		     21 "sys_access"
		     22 "sys_pipe"
		     23 "sys_select"
		     24 "sys_sched_yield"
		     25 "sys_mremap"
		     26 "sys_msync"
		     27 "sys_mincore"
		     28 "sys_madvise"
		     29 "sys_shmget"
		     30 "sys_shmat"
		     31 "sys_shmctl"
		     32 "sys_dup"
		     33 "sys_dup2"
		     34 "sys_pause"
		     35 "sys_nanosleep"
		     36 "sys_getitimer"
		     37 "sys_alarm"
		     38 "sys_setitimer"
		     39 "sys_getpid"
		     40 "sys_sendfile64"
		     41 "sys_socket"
		     42 "sys_connect"
		     43 "sys_accept"
		     44 "sys_sendto"
		     45 "sys_recvfrom"
		     46 "sys_sendmsg"
		     47 "sys_recvmsg"
		     48 "sys_shutdown"
		     49 "sys_bind"
		     50 "sys_listen"
		     51 "sys_getsockname"
		     52 "sys_getpeername"
		     53 "sys_socketpair"
		     54 "sys_setsockopt"
		     55 "sys_getsockopt"
		     56 "sys_clone"
		     57 "sys_fork"
		     58 "sys_vfork"
		     59 "sys_execve"
		     60 "sys_exit"
		     61 "sys_wait4"
		     62 "sys_kill"
		     63 "sys_newuname"
		     64 "sys_semget"
		     65 "sys_semop"
		     66 "sys_semctl"
		     67 "sys_shmdt"
		     68 "sys_msgget"
		     69 "sys_msgsnd"
		     70 "sys_msgrcv"
		     71 "sys_msgctl"
		     72 "sys_fcntl"
		     73 "sys_flock"
		     74 "sys_fsync"
		     75 "sys_fdatasync"
		     76 "sys_truncate"
		     77 "sys_ftruncate"
		     78 "sys_getdents"
		     79 "sys_getcwd"
		     80 "sys_chdir"
		     81 "sys_fchdir"
		     82 "sys_rename"
		     83 "sys_mkdir"
		     84 "sys_rmdir"
		     85 "sys_creat"
		     86 "sys_link"
		     87 "sys_unlink"
		     88 "sys_symlink"
		     89 "sys_readlink"
		     90 "sys_chmod"
		     91 "sys_fchmod"
		     92 "sys_chown"
		     93 "sys_fchown"
		     94 "sys_lchown"
		     95 "sys_umask"
		     96 "sys_gettimeofday"
		     97 "sys_getrlimit"
		     98 "sys_getrusage"
		     99 "sys_sysinfo"
		     100 "sys_times"
		     101 "sys_ptrace"
		     102 "sys_getuid"
		     103 "sys_syslog"
		     104 "sys_getgid"
		     105 "sys_setuid"
		     106 "sys_setgid"
		     107 "sys_geteuid"
		     108 "sys_getegid"
		     109 "sys_setpgid"
		     110 "sys_getppid"
		     111 "sys_getpgrp"
		     112 "sys_setsid"
		     113 "sys_setreuid"
		     114 "sys_setregid"
		     115 "sys_getgroups"
		     116 "sys_setgroups"
		     117 "sys_setresuid"
		     118 "sys_getresuid"
		     119 "sys_setresgid"
		     120 "sys_getresgid"
		     121 "sys_getpgid"
		     122 "sys_setfsuid"
		     123 "sys_setfsgid"
		     124 "sys_getsid"
		     125 "sys_capget"
		     126 "sys_capset"
		     127 "sys_rt_sigpending"
		     128 "sys_rt_sigtimedwait"
		     129 "sys_rt_sigqueueinfo"
		     130 "sys_rt_sigsuspend"
		     131 "sys_sigaltstack"
		     132 "sys_utime"
		     133 "sys_mknod"
		     134 ""
		     135 "sys_personality"
		     136 "sys_ustat"
		     137 "sys_statfs"
		     138 "sys_fstatfs"
		     139 "sys_sysfs"
		     140 "sys_getpriority"
		     141 "sys_setpriority"
		     142 "sys_sched_setparam"
		     143 "sys_sched_getparam"
		     144 "sys_sched_setscheduler"
		     145 "sys_sched_getscheduler"
		     146 "sys_sched_get_priority_max"
		     147 "sys_sched_get_priority_min"
		     148 "sys_sched_rr_get_interval"
		     149 "sys_mlock"
		     150 "sys_munlock"
		     151 "sys_mlockall"
		     152 "sys_munlockall"
		     153 "sys_vhangup"
		     154 "sys_modify_ldt"
		     155 "sys_pivot_root"
		     156 "sys_ni_syscall"
		     157 "sys_prctl"
		     158 "sys_arch_prctl"
		     159 "sys_adjtimex"
		     160 "sys_setrlimit"
		     161 "sys_chroot"
		     162 "sys_sync"
		     163 "sys_acct"
		     164 "sys_settimeofday"
		     165 "sys_mount"
		     166 "sys_umount"
		     167 "sys_swapon"
		     168 "sys_swapoff"
		     169 "sys_reboot"
		     170 "sys_sethostname"
		     171 "sys_setdomainname"
		     172 "sys_iopl"
		     173 "sys_ioperm"
		     174 ""
		     175 "sys_init_module"
		     176 "sys_delete_module"
		     177 ""
		     178 ""
		     179 "sys_quotactl"
		     180 ""
		     181 ""
		     182 ""
		     183 ""
		     184 ""
		     185 ""
		     186 "sys_gettid"
		     187 "sys_readahead"
		     188 "sys_setxattr"
		     189 "sys_lsetxattr"
		     190 "sys_fsetxattr"
		     191 "sys_getxattr"
		     192 "sys_lgetxattr"
		     193 "sys_fgetxattr"
		     194 "sys_listxattr"
		     195 "sys_llistxattr"
		     196 "sys_flistxattr"
		     197 "sys_removexattr"
		     198 "sys_lremovexattr"
		     199 "sys_fremovexattr"
		     200 "sys_tkill"
		     201 "sys_time"
		     202 "sys_futex"
		     203 "sys_sched_setaffinity"
		     204 "sys_sched_getaffinity"
		     205 ""
		     206 "sys_io_setup"
		     207 "sys_io_destroy"
		     208 "sys_io_getevents"
		     209 "sys_io_submit"
		     210 "sys_io_cancel"
		     211 ""
		     212 "sys_lookup_dcookie"
		     213 "sys_epoll_create"
		     214 ""
		     215 ""
		     216 "sys_remap_file_pages"
		     217 "sys_getdents64"
		     218 "sys_set_tid_address"
		     219 "sys_restart_syscall"
		     220 "sys_semtimedop"
		     221 "sys_fadvise64"
		     222 "sys_timer_create"
		     223 "sys_timer_settime"
		     224 "sys_timer_gettime"
		     225 "sys_timer_getoverrun"
		     226 "sys_timer_delete"
		     227 "sys_clock_settime"
		     228 "sys_clock_gettime"
		     229 "sys_clock_getres"
		     230 "sys_clock_nanosleep"
		     231 "sys_exit_group"
		     232 "sys_epoll_wait"
		     233 "sys_epoll_ctl"
		     234 "sys_tgkill"
		     235 "sys_utimes"
		     236 ""
		     237 "sys_mbind"
		     238 "sys_set_mempolicy"
		     239 "sys_get_mempolicy"
		     240 "sys_mq_open"
		     241 "sys_mq_unlink"
		     242 "sys_mq_timedsend"
		     243 "sys_mq_timedreceive"
		     244 "sys_mq_notify"
		     245 "sys_mq_getsetattr"
		     246 "sys_kexec_load"
		     247 "sys_waitid"
		     248 "sys_add_key"
		     249 "sys_request_key"
		     250 "sys_keyctl"
		     251 "sys_ioprio_set"
		     252 "sys_ioprio_get"
		     253 "sys_inotify_init"
		     254 "sys_inotify_add_watch"
		     255 "sys_inotify_rm_watch"
		     256 "sys_migrate_pages"
		     257 "sys_openat"
		     258 "sys_mkdirat"
		     259 "sys_mknodat"
		     260 "sys_fchownat"
		     261 "sys_futimesat"
		     262 "sys_newfstatat"
		     263 "sys_unlinkat"
		     264 "sys_renameat"
		     265 "sys_linkat"
		     266 "sys_symlinkat"
		     267 "sys_readlinkat"
		     268 "sys_fchmodat"
		     269 "sys_faccessat"
		     270 "sys_pselect6"
		     271 "sys_ppoll"
		     272 "sys_unshare"
		     273 "sys_set_robust_list"
		     274 "sys_get_robust_list"
		     275 "sys_splice"
		     276 "sys_tee"
		     277 "sys_sync_file_range"
		     278 "sys_vmsplice"
		     279 "sys_move_pages"
		     280 "sys_utimensat"
		     281 "sys_epoll_pwait"
		     282 "sys_signalfd"
		     283 "sys_timerfd_create"
		     284 "sys_eventfd"
		     285 "sys_fallocate"
		     286 "sys_timerfd_settime"
		     287 "sys_timerfd_gettime"
		     288 "sys_accept4"
		     289 "sys_signalfd4"
		     290 "sys_eventfd2"
		     291 "sys_epoll_create1"
		     292 "sys_dup3"
		     293 "sys_pipe2"
		     294 "sys_inotify_init1"
		     295 "sys_preadv"
		     296 "sys_pwritev"
		     297 "sys_rt_tgsigqueueinfo"
		     298 "sys_perf_event_open"
		     299 "sys_recvmmsg"
		     300 "sys_fanotify_init"
		     301 "sys_fanotify_mark"
		     302 "sys_prlimit64"
		     303 "sys_name_to_handle_at"
		     304 "sys_open_by_handle_at"
		     305 "sys_clock_adjtime"
		     306 "sys_syncfs"
		     307 "sys_sendmmsg"
		     308 "sys_setns"
		     309 "sys_getcpu"
		     310 "sys_process_vm_readv"
		     311 "sys_process_vm_writev"
		     312 "sys_kcmp"
		     313 "sys_finit_module"
		     314 "sys_sched_setattr"
		     315 "sys_sched_getattr"
		     316 "sys_renameat2"
		     317 "sys_seccomp"
		     318 "sys_getrandom"
		     319 "sys_memfd_create"
		     320 "sys_kexec_file_load"
		     321 "sys_bpf"
		     322 "sys_execveat"
		     323 "sys_userfaultfd"
		     324 "sys_membarrier"
		     325 "sys_mlock2"
		     326 "sys_copy_file_range"
		     327 "sys_preadv2"
		     328 "sys_pwritev2"
		     329 "sys_pkey_mprotect"
		     330 "sys_pkey_alloc"
		     331 "sys_pkey_free"
		     332 "sys_statx"
		     333 "sys_io_pgetevents"
		     334 "sys_rseq"
		     424 "sys_pidfd_send_signal"
		     425 "sys_io_uring_setup"
		     426 "sys_io_uring_enter"
		     427 "sys_io_uring_register"
		     428 "sys_open_tree"
		     429 "sys_move_mount"
		     430 "sys_fsopen"
		     431 "sys_fsconfig"
		     432 "sys_fsmount"
		     433 "sys_fspick"
		     434 "sys_pidfd_open"
		     435 "sys_clone3"
		     436 "sys_close_range"
		     437 "sys_openat2"
		     438 "sys_pidfd_getfd"
		     439 "sys_faccessat2"
		     440 "sys_process_madvise"
		     441 "sys_epoll_pwait2"
		     442 "sys_mount_setattr"
		     443 "sys_quotactl_fd"
		     444 "sys_landlock_create_ruleset"
		     445 "sys_landlock_add_rule"
		     446 "sys_landlock_restrict_self"
		     447 "sys_memfd_secret"
		     448 "sys_process_mrelease"
		     449 "sys_futex_waitv"
		     450 "sys_set_mempolicy_home_node"
		     512 "compat_sys_rt_sigaction"
		     513 "compat_sys_x32_rt_sigreturn"
		     514 "compat_sys_ioctl"
		     515 "sys_readv"
		     516 "sys_writev"
		     517 "compat_sys_recvfrom"
		     518 "compat_sys_sendmsg"
		     519 "compat_sys_recvmsg"
		     520 "compat_sys_execve"
		     521 "compat_sys_ptrace"
		     522 "compat_sys_rt_sigpending"
		     523 "compat_sys_rt_sigtimedwait_time64"
		     524 "compat_sys_rt_sigqueueinfo"
		     525 "compat_sys_sigaltstack"
		     526 "compat_sys_timer_create"
		     527 "compat_sys_mq_notify"
		     528 "compat_sys_kexec_load"
		     529 "compat_sys_waitid"
		     530 "compat_sys_set_robust_list"
		     531 "compat_sys_get_robust_list"
		     532 "sys_vmsplice"
		     533 "sys_move_pages"
		     534 "compat_sys_preadv64"
		     535 "compat_sys_pwritev64"
		     536 "compat_sys_rt_tgsigqueueinfo"
		     537 "compat_sys_recvmmsg_time64"
		     538 "compat_sys_sendmmsg"
		     539 "sys_process_vm_readv"
		     540 "sys_process_vm_writev"
		     541 "sys_setsockopt"
		     542 "sys_getsockopt"
		     543 "compat_sys_io_setup"
		     544 "compat_sys_io_submit"
		     545 "compat_sys_execveat"
		     546 "compat_sys_preadv64v2"
		     547 "compat_sys_pwritev64v2"
)))
#+END_SRC

* Type script
#+BEGIN_SRC emacs-lisp :results output silent
(use-package typescript-mode
  :ensure t
  :config
  (setq typescript-indent-level 2)
)
#+END_SRC
* Geiser (guile lisp)
#+BEGIN_SRC emacs-lisp :results output silent
(use-package geiser
  :ensure t
)

(use-package geiser-guile
  :ensure t
  :config
  (setq geiser-guile-binary "guile3.0")
  (when (executable-find "guix")
  (add-to-list 'geiser-guile-load-path
              (expand-file-name "~/.config/guix/current/share/guile/site/3.0")
              (expand-file-name "~/.guix-profile/share/guile/3.0/")
  ))
)
#+END_SRC
* Dy insert random string

#+BEGIN_SRC emacs-lisp :results output silent
(defun random-alnum ()
  (let* ((alnum "abcdefghijklmnopqrstuvwxyz0123456789")
         (i (% (abs (random)) (length alnum))))
    (substring alnum i (1+ i))))

(defun insert-random-string (len)
  "Insert random string.
   Use c-U 10 M-x insert-random-string
   "
  (interactive "p")
  (message (format "%d" len))
  (dotimes (i len)
  (insert (random-alnum)))
  )
#+END_SRC

* Dy insert formated
#+BEGIN_SRC emacs-lisp :results output silent
(defcustom dy-insert-template "var=%v"
  "Path to program ruff."
  :group 'dy-insert
  :type '(string))


(defun dy-test()
(interactive)
(message "%s" (bounds-of-thing-at-point 'symbol))
)

(defun dy-insert-formated ()
  (interactive)
  (let* (p1 p2 var)
    (if (use-region-p)
        (progn
          (setq p1 (region-beginning)
                (setq p2 (region-end))
                (setq var (buffer-substring-no-properties p1 p2))))
      (progn
        (setq p1 (car (bounds-of-thing-at-point 'symbol)))
        (setq p2 (cdr (bounds-of-thing-at-point 'symbol)))
        (setq var (buffer-substring-no-properties p1 p2))))

    (save-restriction
      (narrow-to-region p1 p2)
      (delete-region (point-min) (point-max))
      (insert (format-spec dy-insert-template `((?v . ,var)))))
    (next-line)))
     
#+END_SRC

* Eat 
#+BEGIN_SRC emacs-lisp :results output silent
;; (add-to-list 'load-path  "/home/dyens/dev/external/emacs-eat")
;; (require 'eat)
#+END_SRC
* Mode line 
#+BEGIN_SRC emacs-lisp :results output silent
(defvar-local dy-modeline-major-mode
    '(:eval
      (list
       (propertize (format "%s " (symbol-name major-mode)) 'face 'shadow)))
  "Mode line construct to display the major mode.")

(put 'dy-modeline-major-mode 'risky-local-variable t)


(defun dy-buffer-name ()
  "Buffer name with lock if readonly."
  (let ((name (buffer-name)))
  (if buffer-read-only
          (format "%s%s" (char-to-string #xE0A2) name)
        name)
  ))

(defvar-local dy-modeline-buffer-name
    '(:eval
      (list
       (propertize (format "%s " (dy-buffer-name)) 'face 'bold)))
  "Mode line construct to display buffer name.")

(put 'dy-modeline-buffer-name 'risky-local-variable t)


(defun dy-vc-branch-name ()
  "Return VC branch name."
  (let* ((file (buffer-file-name))
         (backend (vc-backend file)))
  (when-let ((backend backend) ; backend should not be nil
             (rev (vc-working-revision file backend))
             (branch (or (vc-git--symbolic-ref file)
                         (substring rev 0 7))))
    branch)))

(defvar-local dy-modeline-branch-name
    '(:eval
      (list
       (propertize (format "⮑%s " (or (dy-vc-branch-name) "E")) 'face 'bold)))
  "Mode line construct to display buffer name.")

(put 'dy-modeline-branch-name 'risky-local-variable t)



(setq-default mode-line-format
              '("%e"
                dy-modeline-buffer-name
                dy-modeline-major-mode
                dy-modeline-branch-name
                mode-line-misc-info mode-line-end-spaces))

#+END_SRC

* Prefect margin (center current screen)
#+BEGIN_SRC emacs-lisp :results output silent
(use-package perfect-margin
  :ensure t
  :config
  (perfect-margin-mode 1)
)
#+END_SRC

* Org modern
#+BEGIN_SRC emacs-lisp :results output silent
(use-package org-modern
  :ensure t
  :config
)
#+END_SRC

* Org Mermaid
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ob-mermaid
  :ensure t
  :config
  (setq ob-mermaid-cli-path "/home/dyens/.nvm/versions/node/v18.7.0/bin/mmdc")
)
#+END_SRC

* Spacious padding

#+BEGIN_SRC emacs-lisp :results output silent
(use-package spacious-padding
:ensure t
:config
;; These is the default value, but I keep it here for visiibility.
(setq spacious-padding-widths
      '( :internal-border-width 10
         :header-line-width 4
         :mode-line-width 6
         :tab-width 4
         :right-divider-width 10
         :scroll-bar-width 8))

(spacious-padding-mode 0)

;; Set a key binding if you need to toggle spacious padding.
(define-key global-map (kbd "<f8>") #'spacious-padding-mode)
)
#+END_SRC

* Lilypond
#+BEGIN_SRC emacs-lisp :results output silent
(setq load-path (append (list (expand-file-name "lilypond" init-dir)) load-path))
(autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
(add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
(add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))
(add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
#+END_SRC

* Elpy
#+BEGIN_SRC emacs-lisp :results output silent
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  (when (load "flycheck" t t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
)
#+END_SRC
* Transparency
#+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'load-path "/home/dyens/dev/external/transparency.el")
  (use-package transparency
    :ensure nil ; To ensure that it doesn't try to fetch it with `package'
    :commands (transparency-mode)
    :custom
    (global-transparency-alpha/default 75)
    (global-transparency-alpha--previous/default 90)

    :config
    (transparency-mode +1))
#+END_SRC
