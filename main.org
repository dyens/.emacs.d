:#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction
Set credentials

#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC

Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

Base settings
#+BEGIN_SRC emacs-lisp :results output silent
;; Scrolling
(setq mouse-wheel-scroll-amount '(1)    ; scroll gentle
      mouse-wheel-progressive-speed nil ; don't accelerate
      scroll-conservatively 101         ; don't jump to the middle of screen
      hscroll-margin 1                  ; don't you scroll that early!
      hscroll-step 1                    ; but scroll just a bit
      scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp :results output silent
(global-display-line-numbers-mode)
#+END_SRC

* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

* Backup
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* History
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* Browser
#+BEGIN_SRC emacs-lisp :results output silent
; but i not use  chrome)
;(setq browse-url-browser-function 'browse-url-generic
;      browse-url-generic-program "google-chrome-stable"
;      browse-url-at-point "google-chrome-stable"
;)
#+END_SRC
* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode 1)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :results output silent
  ; (load-theme 'adwaita t)
  ; (load-theme 'gruvbox-dark-hard t)
  ; (load-theme 'gruber-darker t)

  ; (load-theme 'dracula t)

  ; (require 'doom-themes)

  ;; Global settings (defaults)
  ; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;     doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  ; (load-theme 'whiteboard t)

  ;; Enable flashing mode-line on errors
  ; (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ; (doom-themes-neotree-config)
  ;; or for treemacs users
  ; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ; (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  ; (doom-themes-org-config)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 130
                    :weight 'normal
                    :width 'normal)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config 
    (evil-mode 1)

    (define-key evil-normal-state-map (kbd "<SPC> b") 'ivy-switch-buffer)
    (define-key evil-normal-state-map (kbd "<SPC> f") 'counsel-find-file)
    (define-key evil-normal-state-map (kbd "<SPC> s") 'swiper)

    (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)

    (define-key evil-normal-state-map (kbd "<SPC> l 0") 'eyebrowse-switch-to-window-config-0)
    (define-key evil-normal-state-map (kbd "<SPC> l 1") 'eyebrowse-switch-to-window-config-1)
    (define-key evil-normal-state-map (kbd "<SPC> l 2") 'eyebrowse-switch-to-window-config-2)
    (define-key evil-normal-state-map (kbd "<SPC> l 3") 'eyebrowse-switch-to-window-config-3)
    (define-key evil-normal-state-map (kbd "<SPC> l 4") 'eyebrowse-switch-to-window-config-4)
    (define-key evil-normal-state-map (kbd "<SPC> l 5") 'eyebrowse-switch-to-window-config-5)
    (define-key evil-normal-state-map (kbd "<SPC> l 6") 'eyebrowse-switch-to-window-config-6)
    (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status)

    (define-key evil-normal-state-map (kbd "<SPC> c") 'comment-line)
    (define-key evil-visual-state-map (kbd "<SPC> c") 'comment-line)

    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
    )

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ivy
    :ensure t
    :config 
    (ivy-mode 1)
    )
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package counsel
    :ensure t
    :config 
    (global-set-key (kbd "M-x") 'counsel-M-x)
    )
#+END_SRC

* Winum
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package winum
    :ensure t
    :config 
    (winum-mode)
    (define-key compilation-mode-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key compilation-mode-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key compilation-mode-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key compilation-mode-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key compilation-mode-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key compilation-mode-map (kbd "<SPC> 6") 'winum-select-window-6)
    )
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode)
    )
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :ensure t
    )
#+END_SRC

For evil bindigs
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-magit
    :ensure t
    )
#+END_SRC

* Company-mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    )
#+END_SRC

* Python
** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pyvenv
    :ensure t
    :config
    (defun pipenvenv-old ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.virtualenvs")
        )

    (defun pipenvenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
        )
    (defun poetryenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
      )
    ;; default env
    (poetryenv)
    )
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :ensure t
    )
#+END_SRC

** Py-isrot
#+BEGIN_SRC emacs-lisp :results output silent
(use-package py-isort
  :ensure t
  :config 
  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> i") 'py-isort-buffer))
  )
#+END_SRC

** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pytest
    :ensure t
    :config 
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> t") 'pytest-one))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T a") 'pytest-all))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T b") 'pytest-module))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T p") 'pytest-pdb-one))
    )
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package lsp-mode
    :ensure t
    :hook ((python-mode . lsp))
    :commands lsp
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-prefer-flymake nil)
    (setq lsp-enable-snippet nil)
    
    (setq-default lsp-pyls-configuration-sources ["flake8"])
    (setq lsp-pyls-plugins-pycodestyle-enabled nil
          lsp-pyls-plugins-pyflakes-enabled t)
    )
    


  (use-package lsp-ui :ensure t)
  (use-package company-lsp :commands company-lsp)



#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "-i --simple-prompt")
(eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "g d") 'lsp-find-definition))
(eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> =") 'lsp-format-buffer))
(eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> m R") 'run-python))
(eval-after-load 'python 
                   '(define-key evil-visual-state-map (kbd "<SPC> m r") 'python-shell-send-region))
(eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> m b") 'python-shell-send-buffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  ; (use-package dap-mode
  ;   :ensure t
  ;   :config
  ;   (require 'dap-python)
  ; 
  ;   (defun dap-python--populate-start-file-args (conf)
  ;     "Populate CONF with the required arguments."
  ;     (let* ((host "localhost")
  ;            (debug-port (dap--find-available-port host dap-python-default-debug-port))
  ;            (python-executable (executable-find dap-python-executable))
  ;            (python-args (or (plist-get conf :args) ""))
  ;            (program (or (plist-get conf :target-module)
  ;                         (plist-get conf :program)
  ;                         (buffer-file-name)))
  ;            (module (plist-get conf :module)))
  ; 
  ;       (dap--put-if-absent conf :program-to-start
  ;                           (format "%s%s -m ptvsd --wait --host %s --port %s %s %s %s"
  ;                                   (or dap-python-terminal "")
  ;                                   (shell-quote-argument python-executable)
  ;                                   host
  ;                                   debug-port
  ;                                   (if module (concat "-m " (shell-quote-argument module)) "")
  ;                                   (shell-quote-argument program)
  ;                                   python-args))
  ;       (plist-put conf :program program)
  ;       (plist-put conf :debugServer debug-port)
  ;       (plist-put conf :port debug-port)
  ;       (plist-put conf :wait-for-port t)
  ;       (plist-put conf :hostName host)
  ;       (plist-put conf :host host)
  ;       conf))
  ; 
  ;   (dap-register-debug-template "BDC"
  ;     (list :type "python"
  ;           :args "-i"
  ;           :cwd nil
  ;           :env '(
  ;                  ("DEBUG" . "1")
  ;                  ("PYTHONPATH" . "/home/dyens/.pyenv/versions/3.7.5/lib/python37.zip:/home/dyens/.pyenv/versions/3.7.5/lib/python3.7:/home/dyens/.pyenv/versions/3.7.5/lib/python3.7/lib-dynload:/home/dyens/.cache/pypoetry/virtualenvs/bdc-vrjcpwNE-py3.7/lib/python3.7/site-packages")
  ;                 )
  ; 
  ; 
  ;           :target-module (expand-file-name "~/dev/bdc/main.py")
  ;           :request "launch"
  ;           :name "BDC"))
  ; )
#+END_SRC

* Ansi-color
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ansi-color
    :ensure t
    :config 
    (defun colorize-compilation-buffer ()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    )
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :ensure t
    :config 
    (projectile-mode +1)
    (define-key evil-normal-state-map (kbd "<SPC> p") 'projectile-command-map)
    (define-key evil-normal-state-map (kbd "<SPC> p g") 'projectile-grep)
    (setq projectile-completion-system 'ivy)
    (setq projectile-use-git-grep t)
    )
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

* Docker-compose
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-compose-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent

  (use-package org
    :ensure t
    :custom
    (shell-file-name "bash" "default shell is bash")
    (org-confirm-babel-evaluate nil "Eval withour confirm")
    (org-display-inline-images t)
    (org-redisplay-inline-images t)
    (org-startup-with-inline-images "inlineimages")
    (org-agenda-files (list "~/org/agenda.org"))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (shell . t)
       (emacs-lisp . t)
       (plantuml . t)
       (sql . t)
       ))
  )

#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs  '(
                         "~/.emacs.d/snippets"                 ;; personal snippets
                         )
                       "Set yasnippet dir")
    :config
    (yas-global-mode 1)
  )
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rust-mode
    :ensure t
    :custom
    (rust-format-on-save t "Format rust code on save")
    (company-tooltip-align-annotations t "Company annotations")
    :mode ("\\rs\\'" . rust-mode)
    :config
    (eval-after-load 'racer-mode
                      '(define-key evil-normal-state-map (kbd "<SPC> m c") 'rust-compile))
    (eval-after-load 'racer-mode
                       '(define-key evil-normal-state-map (kbd "<SPC> m r") 'rust-run))
    (eval-after-load 'racer-mode
                       '(define-key evil-normal-state-map (kbd "g d") 'racer-find-definition))
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  )
#+END_SRC
** Racer
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package racer
    :ensure t
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'rust-mode-hook #'company-mode)
  )
#+END_SRC

* Abbrev
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (clear-abbrev-table global-abbrev-table)

  (define-abbrev-table 'global-abbrev-table
    '(

      ;; net abbrev
      ("afaik" "as far as i know" )
      ("r" "return" )
      ))

  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table))

  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("r" "return")
      ("ass" "assert")
      ("fr" "from")
      ("imp" "import")
      ("tr" "import pdb; pdb.set_trace()")

      ))

  (set-default 'abbrev-mode t)

  (setq save-abbrevs nil)
#+END_SRC

* Post Settings
** Quit minibuffer by one escape
#+BEGIN_SRC emacs-lisp :results output silent
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ;; (define-key ido-completion-map (kbd "<escape") 'ido-exit-minibuffer
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-tramp
    :ensure t
    :config 
    )
#+END_SRC

* Plantuml
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package plantuml-mode
    :ensure t
    :mode ("\\plantuml\\'" . plantuml-mode)
    :custom
    (plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    (org-plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    )
#+END_SRC

* Enginemode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t)
    (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :docstring "Search in github"
    :keybinding "g"
    )
    )
#+END_SRC

* Org-jira
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-jira
    :ensure t
    :custom
    (jiralib-url "https://jira.cindicator.net")
    :config
    )
#+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package expand-region
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "<SPC> e") 'er/expand-region)
    )
#+END_SRC
* Emojify
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package emojify
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-emojify-mode)
    )
#+END_SRC

* Daemon
#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
#+END_SRC

* Mail
http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html
Install isync / mbsync

#+BEGIN_SRC emacs-lisp :results output silent

(add-to-list 'load-path "/opt/mu/mu4e")

(require 'mu4e)

    (setq mu4e-maildir (expand-file-name "~/email"))
    (setq mu4e-sent-folder   "/mail/Sent Items")
    (setq mu4e-drafts-folder "/mail/Drafts")
    (setq mu4e-trash-folder  "/mail/Trash")
    ; get mail
    (setq mu4e-get-mail-command "mbsync -a"
          mu4e-html2text-command "w3m -T text/html"
          mu4e-update-interval 120
          mu4e-headers-auto-update t
          mu4e-compose-signature-auto-include nil)
  
    (setq mu4e-maildir-shortcuts
          '( ("/mail/INBOX"               . ?i)
             ("/mail/Sent Items"   . ?s)
             ("/mail/Trash"       . ?t)
             ("/mail/Drafts"    . ?d)))

#+END_SRC


#TODO https://github.com/emacs-evil/evil-collection
