#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction
Set credentials
#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC


Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

* Backup
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* History
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode 1)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :results output silent
(load-theme 'gruber-darker t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 100
                    :weight 'normal
                    :width 'normal)
#+END_SRC

* Evil mode
Vim users mode
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'evil)
  (evil-mode 1)
#+END_SRC

* Ivy
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'ivy)
  (ivy-mode 1)
#+END_SRC

** Settings
TODO: No output
#+BEGIN_SRC emacs-lisp :results output silent
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

* Counsel
** Settings
TODO: No output
#+BEGIN_SRC emacs-lisp :results output silent
  (global-set-key (kbd "M-x") 'counsel-M-x)
#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'yasnippet)
  (setq yas-snippet-dirs
    '(
       "~/.emacs.d/snippets"                 ;; personal snippets
   ))

  (yas-global-mode 1)
#+END_SRC

* Winum
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'winum)
 (winum-mode)
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'eyebrowse)
 (eyebrowse-mode)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'magit)
#+END_SRC

For evil bindigs
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'evil-magit)
#+END_SRC
* Yapf
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'yapfify)
 (eval-after-load 'python 
                  '(define-key evil-normal-state-map (kbd "<SPC> =") 'yapfify-buffer))
#+END_SRC
* Python
** Py-isort
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'py-isort)
 (eval-after-load 'python 
                  '(define-key evil-normal-state-map (kbd "<SPC> i") 'py-isort-buffer))
#+END_SRC
** Elpy
*** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'elpy)
  (elpy-enable)
#+END_SRC

*** Interpreter
#+BEGIN_SRC emacs-lisp :results output silent
 (setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

*** Rgrep
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'elpy)
 (eval-after-load 'python 
                  '(define-key evil-normal-state-map (kbd "<SPC> r") 'elpy-rgrep-symbol))

#+END_SRC

*** jedi
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'elpy)
 (setq elpy-rpc-backend "jedi")
#+END_SRC

*** Go to definition
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'elpy)
  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "g d") 'elpy-goto-assignment))
#+END_SRC

*** Repl
#+BEGIN_SRC emacs-lisp :results output silent
 (require 'elpy)
  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> m R") 'elpy-shell-switch-to-shell))
  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> m b") 'elpy-shell-send-region-or-buffer))
  (eval-after-load 'python 
                   '(define-key evil-visual-state-map (kbd "<SPC> m r") 'elpy-shell-send-region-or-buffer))
#+END_SRC

*** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
  (defun pipenvenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
      )
  (defun poetryenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
    )
  ;; default env
  (poetryenv)
#+END_SRC

** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'pytest)
  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> t") 'pytest-one))

  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> T a") 'pytest-all))

  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> T b") 'pytest-module))

  (eval-after-load 'python 
                   '(define-key evil-normal-state-map (kbd "<SPC> T p") 'pytest-pdb-one))
#+END_SRC

For coloring in compilation
#+BEGIN_SRC emacs-lisp :results output silent
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'restclient)
  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'projectile)
  (projectile-mode +1)
  (define-key evil-normal-state-map (kbd "<SPC> p") 'projectile-command-map)
  (setq projectile-completion-system 'ivy)
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'dockerfile-mode)
  (add-to-list 'auto-mode-alist '("\\Dockerfile\\'" . dockerfile-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (require 'docker-compose-mode)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (sh . t)
     (emacs-lisp . t)
     ))
  (setq shell-file-name "bash")
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'evil)
  (define-key evil-normal-state-map (kbd "<SPC> b") 'ivy-switch-buffer)
  (define-key evil-normal-state-map (kbd "<SPC> f") 'counsel-find-file)
  (define-key evil-normal-state-map (kbd "<SPC> s") 'swiper)

  (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
  (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
  (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
  (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
  (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
  (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)

  (define-key compilation-mode-map (kbd "<SPC> 1") 'winum-select-window-1)
  (define-key compilation-mode-map (kbd "<SPC> 2") 'winum-select-window-2)
  (define-key compilation-mode-map (kbd "<SPC> 3") 'winum-select-window-3)
  (define-key compilation-mode-map (kbd "<SPC> 4") 'winum-select-window-4)
  (define-key compilation-mode-map (kbd "<SPC> 5") 'winum-select-window-5)
  (define-key compilation-mode-map (kbd "<SPC> 6") 'winum-select-window-6)

  (define-key evil-normal-state-map (kbd "<SPC> l 0") 'eyebrowse-switch-to-window-config-0)
  (define-key evil-normal-state-map (kbd "<SPC> l 1") 'eyebrowse-switch-to-window-config-1)
  (define-key evil-normal-state-map (kbd "<SPC> l 2") 'eyebrowse-switch-to-window-config-2)
  (define-key evil-normal-state-map (kbd "<SPC> l 3") 'eyebrowse-switch-to-window-config-3)
  (define-key evil-normal-state-map (kbd "<SPC> l 4") 'eyebrowse-switch-to-window-config-4)
  (define-key evil-normal-state-map (kbd "<SPC> l 5") 'eyebrowse-switch-to-window-config-5)
  (define-key evil-normal-state-map (kbd "<SPC> l 6") 'eyebrowse-switch-to-window-config-6)
  (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status)

  (define-key evil-normal-state-map (kbd "<SPC> c") 'comment-line)
  (define-key evil-visual-state-map (kbd "<SPC> c") 'comment-line)

  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC

** Quit minibuffer by press 1 escape 
#+BEGIN_SRC emacs-lisp :results output silent
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ;; (define-key ido-completion-map (kbd "<escape") 'ido-exit-minibuffer
#+END_SRC


* DONE Ace: Not interesting.
* DONE check spacemacs:  get winum
* DONE eye browse
* DONE mv between windows: winump
* DONE magit
* DONE projectile
* DONE no result in org
* DONE environment python
* DONE projectile
* DONE history
* DONE backup
* DONE global <spc> %d keys

* DONE elpy debugging in tets

* TODO flake per files ingore
* TODO lisp mode
* TODO comment python block
* TODO fix this file (not loadede c-u keybinding)
* TODO snippet for a = a,
* TODO eshell
* TODO org
* TODO rust
