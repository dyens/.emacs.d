:#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction
Set credentials
#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC


Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

Base settings
#+BEGIN_SRC emacs-lisp :results output silent
;; Scrolling
(setq mouse-wheel-scroll-amount '(1)    ; scroll gentle
      mouse-wheel-progressive-speed nil ; don't accelerate
      scroll-conservatively 101         ; don't jump to the middle of screen
      hscroll-margin 1                  ; don't you scroll that early!
      hscroll-step 1                    ; but scroll just a bit
      scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

* Backup
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* History
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode 1)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :results output silent
  ; (load-theme 'gruber-darker t)
  (load-theme 'dracula t)

  ; (require 'doom-themes)

  ;; Global settings (defaults)
  ; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;     doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  ; (load-theme 'whiteboard t)

  ;; Enable flashing mode-line on errors
  ; (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ; (doom-themes-neotree-config)
  ;; or for treemacs users
  ; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ; (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  ; (doom-themes-org-config)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 100
                    :weight 'normal
                    :width 'normal)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil
    :ensure t
    :config 
    (evil-mode 1)

    (define-key evil-normal-state-map (kbd "<SPC> b") 'ivy-switch-buffer)
    (define-key evil-normal-state-map (kbd "<SPC> f") 'counsel-find-file)
    (define-key evil-normal-state-map (kbd "<SPC> s") 'swiper)

    (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)

    (define-key evil-normal-state-map (kbd "<SPC> l 0") 'eyebrowse-switch-to-window-config-0)
    (define-key evil-normal-state-map (kbd "<SPC> l 1") 'eyebrowse-switch-to-window-config-1)
    (define-key evil-normal-state-map (kbd "<SPC> l 2") 'eyebrowse-switch-to-window-config-2)
    (define-key evil-normal-state-map (kbd "<SPC> l 3") 'eyebrowse-switch-to-window-config-3)
    (define-key evil-normal-state-map (kbd "<SPC> l 4") 'eyebrowse-switch-to-window-config-4)
    (define-key evil-normal-state-map (kbd "<SPC> l 5") 'eyebrowse-switch-to-window-config-5)
    (define-key evil-normal-state-map (kbd "<SPC> l 6") 'eyebrowse-switch-to-window-config-6)
    (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status)

    (define-key evil-normal-state-map (kbd "<SPC> c") 'comment-line)
    (define-key evil-visual-state-map (kbd "<SPC> c") 'comment-line)

    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
    )
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ivy
    :ensure t
    :config 
    (ivy-mode 1)
    )
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package counsel
    :ensure t
    :config 
    (global-set-key (kbd "M-x") 'counsel-M-x)
    )
#+END_SRC

* Winum
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package winum
    :ensure t
    :config 
    (winum-mode)
    (define-key compilation-mode-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key compilation-mode-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key compilation-mode-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key compilation-mode-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key compilation-mode-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key compilation-mode-map (kbd "<SPC> 6") 'winum-select-window-6)
    )
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode)
    )
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :ensure t
    )
#+END_SRC

For evil bindigs
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-magit
    :ensure t
    )
#+END_SRC

* Python
** Yapf
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yapfify
    :ensure t
    :config 
    (eval-after-load 'python 
                    '(define-key evil-normal-state-map (kbd "<SPC> =") 'yapfify-buffer))
    )
#+END_SRC

** Py-isort
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package py-isort
    :ensure t
    :config 
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> i") 'py-isort-buffer))
    )
#+END_SRC

** Dy-python
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'python)

  ; for using string-trim
  (require 'subr-x)

  (defun dy-python-arg-params(arg-string)
    "Get python argument params from argument string (name, type, default)."
    (let* (
           (arg-value (split-string arg-string "[[:blank:]]*=[[:blank:]]*" t))
           (name-type-string (car arg-value))
           (name-type (split-string name-type-string "[[:blank:]]*:[[:blank:]]*" t))
           (name (car name-type))
           (type (nth 1 name-type))
           (default-value (nth 1 arg-value))
           )
      (list name type default-value)))

  (defun dy-python-split-args (arg-string)
    "Split a python argument string into ((name, type, default)..) tuples"
    (let* (
           (args (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t))
           (args (mapcar 'string-trim args))
           (arg-values (mapcar 'dy-python-arg-params args))
           )
      arg-values))


  (defun dy-python-args-to-docstring (args-string identation)
    "return docstring format for the python arguments in yas-text"
    (let* (
           (args (dy-python-split-args args-string))
           (args (if (string= (nth 0 (car args)) "self")
                     (cdr args)
                   args))
           (ident (make-string identation ?\s))
           (format-arg (lambda (arg)
                         (concat
                          ident
                          ":param "
                          (nth 0 arg)
                          ": " (nth 0 arg)
                          (if (nth 2 arg) (concat ", default=" (nth 2 arg)))
                          (if (nth 1 arg) (concat
                                       "\n"
                                       ident
                                       ":type "
                                       (nth 0 arg)
                                       ": "
                                       (nth 1 arg)
                                       ))
                          )
                         )
                       )
           (formatted-params (mapconcat format-arg args "\n")))
      (unless (string= formatted-params "")
        (mapconcat 'identity
                   (list  formatted-params)
                   "\n"))))



  (defun dy-python-return-to-docstring (return-string identation)
    "return docstring format for the python return type"
    (let* (
           (return-type (car (split-string return-string "[[:blank:]]*->[[:blank:]]*" t)))
           (ident (make-string identation ?\s))
           (formated-return (format "%s:rtype: %s" ident return-type)))
      (unless (string= return-type "nil") formated-return)))


  (add-hook 'dy-python-mode-hook
            '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))


  (defun dy-python-create-docstring ()
    "return docstring format for the python return type"
    (interactive)
    (save-excursion
      (let (
            $point-declaration-line-start
            $point-declaration-start
            $point-function-start
            $point-function-end
            $point-args-start
            $point-args-end

            $identation
            $fname-string
            $args-string
            $return-string
            $args-docstring
            $return-docstring
            $docstring
            $ident
            )
          (python-nav-beginning-of-defun 1)
          (setq $point-declaration-line-start (point))
          (re-search-forward "def")
          (setq $point-declaration-start (- (point) 3))
          (re-search-forward "[a-z]")
          (setq $point-function-start (point))

          (re-search-forward "(")
          (setq $point-args-start (point))
          (re-search-forward ")")
          (setq $point-args-end (point))
          (re-search-forward ":")
          (setq $point-function-end (point))

          (setq $identation (+ 4 (- $point-declaration-start $point-declaration-line-start)))
          (setq $args-string (buffer-substring $point-args-start (- $point-args-end 1)))
          (setq $return-string (buffer-substring $point-args-end (- $point-function-end 1)))
          (setq $fname-string (buffer-substring (- $point-function-start 1) (- $point-args-start 1)))

          (setq $args-docstring (dy-python-args-to-docstring $args-string $identation))
          (setq $return-docstring (dy-python-return-to-docstring $return-string $identation))

          (setq $ident (make-string $identation ?\s))

          (setq $docstring
                (concat
                  "\n"
                  $ident 
                  "\"\"\""
                  $fname-string
                  ".\n"
                (if (not (string= $args-docstring "nil"))
                    (concat "\n"
                          $args-docstring
                          "\n")
                  "")
                (if $return-docstring
                    (concat "\n"
                          $return-docstring
                          "\n")
                  "")
                $ident 
                "\"\"\""))

          (goto-char $point-function-end)
          (insert $docstring)
      )
     )
    )


  (defun dy-python-vars-to-dict ($start $end)
    "Mv variables to dict."
    (interactive "r")
    (let (
          $region-string
          $variables
          $var-to-kwarg
          $kwargs
          )
     (setq $region-string (buffer-substring $start $end))
     (setq $variables (split-string $region-string "[[:blank:]]*,[[:blank:]]*" t))
     (setq $variables (mapcar 'string-trim $variables))
     (setq $var-to-kwarg (lambda (var)
                          (concat
                           "'" var "': " var
                           )))
     (setq $kwargs (mapconcat $var-to-kwarg $variables ", "))

     (delete-region $start $end)
     (insert "{")
     (insert $kwargs)
     (insert "}")
     )
    )



  (defun dy-python-vars-to-kwargs ($start $end)
    "Mv variables to kwargs."
    (interactive "r")
    (let (
          $region-string
          $variables
          $var-to-kwarg
          $kwargs
          )
     (setq $region-string (buffer-substring $start $end))
     (setq $variables (split-string $region-string "[[:blank:]]*,[[:blank:]]*" t))
     (setq $variables (mapcar 'string-trim $variables))
     (setq $var-to-kwarg (lambda (var)
                          (concat
                           var "=" var
                           )))
     (setq $kwargs (mapconcat $var-to-kwarg $variables ", "))

     (delete-region $start $end)
     (insert $kwargs)
     )
    )
#+END_SRC

** Elpy
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elpy
    :ensure t
    :custom
    (python-shell-interpreter "ipython" "Default interpreter is ipython")
    (python-shell-interpreter-args "-i --simple-prompt" "Interpreter args")
    (elpy-rpc-backend "jedi" "rpc backend is jedi")
    :config 
    (elpy-enable)
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> r") 'elpy-rgrep-symbol))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "g d") 'elpy-goto-assignment))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> d") 'elpy-doc))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> m R") 'elpy-shell-switch-to-shell))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> m b") 'elpy-shell-send-region-or-buffer))
    (eval-after-load 'python 
                     '(define-key evil-visual-state-map (kbd "<SPC> m r") 'elpy-shell-send-region-or-buffer))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> m d") 'dy-python-create-docstring))
    (eval-after-load 'python 
                     '(define-key evil-visual-state-map (kbd "<SPC> m v d") 'dy-python-vars-to-dict))
    (eval-after-load 'python 
                     '(define-key evil-visual-state-map (kbd "<SPC> m v w") 'dy-python-vars-to-kwargs))
    )
#+END_SRC

** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
  (defun pipenvenv-old ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.virtualenvs")
      )

  (defun pipenvenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
      )
  (defun poetryenv ()
    (interactive)
    (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
    )
  ;; default env
  (poetryenv)
#+END_SRC

** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pytest
    :ensure t
    :config 
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> t") 'pytest-one))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T a") 'pytest-all))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T b") 'pytest-module))
    (eval-after-load 'python 
                     '(define-key evil-normal-state-map (kbd "<SPC> T p") 'pytest-pdb-one))
    )

#+END_SRC

* Ansi-color
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ansi-color
    :ensure t
    :config 
    (defun colorize-compilation-buffer ()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    )
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :ensure t
    :config 
    (projectile-mode +1)
    (define-key evil-normal-state-map (kbd "<SPC> p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    )
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

* Docker-compose
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-compose-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent

  (use-package org
    :ensure t
    :custom
    (shell-file-name "bash" "default shell is bash")
    (org-confirm-babel-evaluate nil "Eval withour confirm")
    (org-display-inline-images t)
    (org-redisplay-inline-images t)
    (org-startup-with-inline-images "inlineimages")
    (org-agenda-files (list "~/org/agenda.org"))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (shell . t)
       (emacs-lisp . t)
       (plantuml . t)
       ))
  )

#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs  '(
                         "~/.emacs.d/snippets"                 ;; personal snippets
                         )
                       "Set yasnippet dir")
    :config
    (yas-global-mode 1)
  )
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rust-mode
    :ensure t
    :custom
    (rust-format-on-save t "Format rust code on save")
    (company-tooltip-align-annotations t "Company annotations")
    :mode ("\\rs\\'" . rust-mode)
    :config
    (eval-after-load 'racer-mode
                      '(define-key evil-normal-state-map (kbd "<SPC> m c") 'rust-compile))
    (eval-after-load 'racer-mode
                       '(define-key evil-normal-state-map (kbd "<SPC> m r") 'rust-run))
    (eval-after-load 'racer-mode
                       '(define-key evil-normal-state-map (kbd "g d") 'racer-find-definition))
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  )
#+END_SRC
** Racer
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package racer
    :ensure t
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'rust-mode-hook #'company-mode)
  )
#+END_SRC

* Abbrev
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (clear-abbrev-table global-abbrev-table)

  (define-abbrev-table 'global-abbrev-table
    '(

      ;; net abbrev
      ("afaik" "as far as i know" )
      ("r" "return" )
      ))

  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table))

  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("r" "return")
      ("ass" "assert")
      ("fr" "from")
      ("imp" "import")
      ("tr" "import pdb; pdb.set_trace()")

      ))

  (set-default 'abbrev-mode t)

  (setq save-abbrevs nil)
#+END_SRC

* Post Settings
** Quit minibuffer by one escape
#+BEGIN_SRC emacs-lisp :results output silent
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ;; (define-key ido-completion-map (kbd "<escape") 'ido-exit-minibuffer
#+END_SRC

* Wakatime
#+BEGIN_SRC emacs-lisp :results output silent
;;  (use-package wakatime-mode
;;    :custom (wakatime-cli-path "/home/dyens/.local/bin/wakatime")
;;    :config (global-wakatime-mode))
;; (custom-set-variables `(wakatime-api-key "XXX"))
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-tramp
    :ensure t
    :config 
    )
#+END_SRC

* Plantuml
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package plantuml-mode
    :ensure t
    :mode ("\\plantuml\\'" . plantuml-mode)
    :custom
    (plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    (org-plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    )
#+END_SRC

* Enginemode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t)
    (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :docstring "Search in github"
    :keybinding "g"
    )
    )
#+END_SRC
* All the icons
#+BEGIN_SRC emacs-lisp :results output silent
(use-package all-the-icons
  :config
  ;; org-mode ellipsis
  (setq-default org-ellipsis (concat " " (all-the-icons-faicon "angle-down") " ")))

(use-package all-the-icons-dired
  :after (all-the-icons)
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
* Origami
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package origami
    :ensure t
    :config
    )
#+END_SRC
* Org-jira
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-jira
    :ensure t
    :custom
    (jiralib-url "https://jira.cindicator.net")
    :config
    )
#+END_SRC
