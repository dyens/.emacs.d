:#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

Deffered compilation
https://masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation

#+BEGIN_SRC emacs-lisp :results output silent
(setq comp-deferred-compilation t)
#+END_SRC

Set credentials
#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC

Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

Base settings
#+BEGIN_SRC emacs-lisp :results output silent
;; Scrolling
(setq mouse-wheel-scroll-amount '(1)    ; scroll gentle
      mouse-wheel-progressive-speed nil ; don't accelerate
      scroll-conservatively 101         ; don't jump to the middle of screen
      hscroll-margin 1                  ; don't you scroll that early!
      hscroll-step 1                    ; but scroll just a bit
      scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp :results output silent
(global-display-line-numbers-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC

* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

* Backup
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* History
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to. 
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* Browser
#+BEGIN_SRC emacs-lisp :results output silent
; but i not use  chrome)
;(setq browse-url-browser-function 'browse-url-generic
;      browse-url-generic-program "google-chrome-stable"
;      browse-url-at-point "google-chrome-stable"
;)
#+END_SRC
* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode -1)
#+END_SRC

** Column number mode
#+BEGIN_SRC emacs-lisp :results output silent
;(setq column-number-mode t) ;; show columns in addition to rows in mode line
#+END_SRC

** Paren mode
#+BEGIN_SRC emacs-lisp :results output silent
  (show-paren-mode)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :results output silent



;;(use-package color-theme-sanityinc-tomorrow
;;  :ensure t
;;  :config
;;  (color-theme-sanityinc-tomorrow-night))

(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox t))

;;  (use-package apropospriate-theme
;;    :ensure t
;;    :config 
;;    (load-theme 'apropospriate-dark t)
;;    ;; or
;;    ;; (load-theme 'apropospriate-light t)
;;  )

  ;;  (use-package modus-operandi-theme
  ;;    :ensure t)
  ;;
  ;;  (use-package modus-vivendi-theme
  ;;    :ensure t)
  ;;
  ;;  (load-theme 'modus-operandi t)           ; Light theme

  ;; My default theme
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;   (scroll-bar-mode 0)
  ;   (fringe-mode 0)
  ;   
  ;   (set-face-attribute 'mode-line nil :box nil)
  ;   (set-face-attribute 'mode-line-inactive nil :box nil)
  ;   
  ;   (set-face-attribute 'mode-line nil :background "#c6edf9")
  ;   (set-face-attribute 'mode-line-inactive nil :background "#FAFAFA")
  ;   
  ;   (set-face-background 'vertical-border "gray")
  ;   (set-face-foreground 'vertical-border (face-background 'vertical-border))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ; (load-theme 'adwaita t)
    ; (load-theme 'gruvbox-dark-hard t)
    ; (load-theme 'gruber-darker t)

    ; (load-theme 'dracula t)

    ; (require 'doom-themes)

    ;; Global settings (defaults)
    ; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;     doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    ; (load-theme 'whiteboard t)

    ;; Enable flashing mode-line on errors
    ; (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ; (doom-themes-neotree-config)
    ;; or for treemacs users
    ; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ; (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    ; (doom-themes-org-config)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Terminus"
                    :height 140
                    :weight 'bold
                    :width 'normal)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config 
    (evil-mode 1)

    (define-key evil-normal-state-map (kbd "<SPC> b") 'ivy-switch-buffer)
    (define-key evil-normal-state-map (kbd "<SPC> f") 'counsel-find-file)
    (define-key evil-normal-state-map (kbd "<SPC> s") 'projectile-ripgrep)

    (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)

    (define-key evil-normal-state-map (kbd "<SPC> l 0") 'eyebrowse-switch-to-window-config-0)
    (define-key evil-normal-state-map (kbd "<SPC> l 1") 'eyebrowse-switch-to-window-config-1)
    (define-key evil-normal-state-map (kbd "<SPC> l 2") 'eyebrowse-switch-to-window-config-2)
    (define-key evil-normal-state-map (kbd "<SPC> l 3") 'eyebrowse-switch-to-window-config-3)
    (define-key evil-normal-state-map (kbd "<SPC> l 4") 'eyebrowse-switch-to-window-config-4)
    (define-key evil-normal-state-map (kbd "<SPC> l 5") 'eyebrowse-switch-to-window-config-5)
    (define-key evil-normal-state-map (kbd "<SPC> l 6") 'eyebrowse-switch-to-window-config-6)
    (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status)
    (define-key evil-normal-state-map (kbd "<SPC> a") 'org-agenda)

    (define-key evil-normal-state-map (kbd "<SPC> c") 'comment-line)
    (define-key evil-visual-state-map (kbd "<SPC> c") 'comment-line)

    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

    (define-key evil-normal-state-map (kbd "<SPC> z") 'zoom)
    (define-key evil-insert-state-map (kbd "C-l") 'yas-expand-from-trigger-key)
    )

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ivy
    :ensure t
    :config 
    (ivy-mode 1)
    )
#+END_SRC

* Super-word-mode
For backward word and forwardword
#+BEGIN_SRC emacs-lisp :results output silent
  (superword-mode t)
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package counsel
    :ensure t
    :config 
    (global-set-key (kbd "M-x") 'counsel-M-x)
    )
#+END_SRC

* Winum
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package winum
    :ensure t
    :config 
    (winum-mode)
    (define-key compilation-mode-map (kbd "<SPC> 1") 'winum-select-window-1)
    (define-key compilation-mode-map (kbd "<SPC> 2") 'winum-select-window-2)
    (define-key compilation-mode-map (kbd "<SPC> 3") 'winum-select-window-3)
    (define-key compilation-mode-map (kbd "<SPC> 4") 'winum-select-window-4)
    (define-key compilation-mode-map (kbd "<SPC> 5") 'winum-select-window-5)
    (define-key compilation-mode-map (kbd "<SPC> 6") 'winum-select-window-6)
    )
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode)
    )
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :ensure t
    )
#+END_SRC

For evil bindigs
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package evil-magit
    :ensure t
    )
#+END_SRC

* Forge
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package forge
    :after magit
    :ensure t
    )
#+END_SRC

* Company-mode
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package company
    :ensure t
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.0)
    (company-minimum-prefix-length 1)
    (company-show-numbers nil)
    (company-tooltip-align-annotations 't)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    )
#+END_SRC

* Python
** Python mode
#+BEGIN_SRC emacs-lisp :results output silent
(require 'python)
(setq python-indent-def-block-scale 1)
#+END_SRC

** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pyvenv
    :ensure t
    :config
    (defun pipenvenv-old ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.virtualenvs")
        )

    (defun pipenvenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
        )
    (defun poetryenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
      )
    ;; default env
    (poetryenv)
    )
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :ensure t
    )
#+END_SRC

** Py-isrot
#+BEGIN_SRC emacs-lisp :results output silent
(use-package py-isort
  :ensure t
  )
#+END_SRC

** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pytest
    :ensure t
    :config
    (custom-set-variables '(pytest-project-root-files '(".projectile" "setup.py" ".hg" ".git")))
    )
#+END_SRC

** DyPython
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'flycheck)

  ;; TODO if noqa exist - extend it
  (defun dy-python-add-noqa()
    "Add noqa for error string"
    (interactive)
    (save-excursion
      (let* ((errors (flycheck-overlay-errors-at (point)))
             (error-codes (seq-uniq (seq-map 'flycheck-error-id errors)))
             (error-string (mapconcat 'identity error-codes ","))
             (noqa-mes (format "  # NOQA:%s" error-string)))
        (move-end-of-line nil)
        (insert noqa-mes)
        )))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (require 'python)
  ; for using string-trim
  (require 'subr-x)

  (defun dy-python-arg-params(arg-string)
    "Get python argument params from argument string (name, type, default)."
    (let* (
           (arg-value (split-string arg-string "[[:blank:]]*=[[:blank:]]*" t))
           (name-type-string (car arg-value))
           (name-type (split-string name-type-string "[[:blank:]]*:[[:blank:]]*" t))
           (name (car name-type))
           (type (nth 1 name-type))
           (default-value (nth 1 arg-value))
           )
      (list name type default-value)))

  (defun dy-python-split-args (arg-string)
    "Split a python argument string into ((name, type, default)..) tuples"
    (let* (
           (args (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t))
           (args (seq-filter '(lambda (x) (not (string-blank-p x))) args))
           (args (mapcar 'string-trim args))
           (arg-values (mapcar 'dy-python-arg-params args))
           )
      arg-values))


  (defun dy-python-args-to-docstring (args-string identation)
    "return docstring format for the python arguments in yas-text"
    (let* (
           (args (dy-python-split-args args-string))
           (args (if (string= (nth 0 (car args)) "self")
                     (cdr args)
                   args))
           (ident (make-string identation ?\s))
           (format-arg (lambda (arg)
                         (concat
                          ident
                          ":param "
                          (nth 0 arg)
                          ": " (nth 0 arg)
                          (if (nth 2 arg) (concat ", default=" (nth 2 arg)))
                          (if (nth 1 arg) (concat
                                       "\n"
                                       ident
                                       ":type "
                                       (nth 0 arg)
                                       ": "
                                       (nth 1 arg)
                                       ))
                          )
                         )
                       )
           (formatted-params (mapconcat format-arg args "\n")))
      (unless (string= formatted-params "")
        (mapconcat 'identity
                   (list  formatted-params)
                   "\n"))))



  (defun dy-python-return-to-docstring (return-string identation)
    "return docstring format for the python return type"
    (let* (
           (return-type (car (split-string return-string "[[:blank:]]*->[[:blank:]]*" t)))
           (ident (make-string identation ?\s))
           (formated-return (format "%s:rtype: %s" ident return-type)))
      (unless (string= return-type "nil") formated-return)))


  (add-hook 'dy-python-mode-hook
            '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))


(defun dy--python-add-docstring-to-function ($fname $fargs-string $docstring-shift)
  "Add docstring to function."
  (let ($fargs $docstring $docstring-header $docstring-args)
    (setq $docstring-header
	  (dy-capitalize-first-char (replace-regexp-in-string (regexp-quote "_") " " $fname)))

    (setq $fargs (dy-python-split-args $fargs-string))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (setq $docstring-header (format "\"\"\"%s." $docstring-header))
    (insert $docstring-header)
    (setq $fargs (seq-filter '(lambda (arg) (not (string= "self" (car arg)))) $fargs))
    (setq $docstring-args
      (mapcar '
       (lambda (arg)
         (format ":param %s: %s"
    	     (car arg)
    	     (replace-regexp-in-string (regexp-quote "_") " " (car arg))))
       $fargs))
    (when $docstring-args
      (insert "\n")
      (dolist (arg $docstring-args)
    (insert "\n")
    (insert $docstring-shift)
    (insert arg))
      (insert "\n")
      (insert $docstring-shift)
      )
    (insert "\"\"\"")
  ))


(defun dy--python-add-docstring-to-class ($classname $docstring-shift)
  "Add docstring to class."
  (let ($classdocstring (case-fold-search nil))
    (message "%s" $classname)
    (setq $classdocstring (replace-regexp-in-string "\\([A-Z]\\)" " \\1" $classname))
    (setq $classdocstring (string-trim $classdocstring))
    (setq $classdocstring (downcase $classdocstring))
    (setq $classdocstring (dy-capitalize-first-char $classdocstring))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (insert "\"\"\"")
    (insert $classdocstring)
    (insert ".\"\"\"")
    ))

(defun dy-python-create-docstring ()
  "return docstring format for the python return type"
  (interactive)
    (python-nav-beginning-of-defun 1)
    ; jump to first now-whitespace symbol
    (back-to-indentation)
    (let* (
	  ($block-type (thing-at-point 'word))
	  ($block-start (current-column))
	  ($docstring-shift (make-string (+ 4 $block-start) 32))
	  )
      (cond
       ((string= $block-type "class")
	(let ($classname)
	  (re-search-forward
	   "[ \t]*class[ \t]*\\([a-zA-Z0-9_]+\\)" nil t)
	    (setq $classname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (dy--python-add-docstring-to-class $classname $docstring-shift)
	))
       ((string= $block-type "async")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*async[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift)))
       ((string= $block-type "def")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift))))))

  (defun dy-python-kwargs-to-dict ($start $end)
    "Convert kwargs arguments to dict.
     a=1, b=2 -> 'a': 1, 'b': 2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "\\([_0-9a-zA-Z]+\\)\s*=\s*" "'\\1': ")
         ))

  (defun dy-python-dict-to-kwargs ($start $end)
    "Convert dict arguments to kwargs.
     'a': 1, 'b': 2 -> a=1, b=2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "'\\([_0-9a-zA-Z]+\\)'\s*:\s*" "\\1=")
         ))


  (defun dy-python-dict-kwargs-toogle ($start $end)
    "Convert toogle dict kwargs args."
    (interactive "r")
    (if (seq-contains (buffer-substring $start $end) ?=)
        (dy-python-kwargs-to-dict $start $end)
      (dy-python-dict-to-kwargs $start $end)))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package lsp-mode
    :ensure t
    :hook ((python-mode . lsp))
    :commands lsp
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-prefer-flymake nil)

    (setq lsp-enable-snippet nil)
    (setq lsp-idle-delay 0.500)

    ; (setq-default lsp-pyls-configuration-sources ["flake8"])
    (setq lsp-pyls-plugins-pycodestyle-enabled nil
          lsp-pyls-plugins-pyflakes-enabled nil
          lsp-pyls-plugins-flake8-enabled t
    )
    )
    
  (use-package lsp-ui 
     :ensure t
     :custom
     (lsp-ui-doc-enable nil)
     :commands lsp-ui-mode
  )

  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  ; (use-package company-lsp 
  ;    :ensure t
  ;    :commands company-lsp

  ;    :custom
  ;    (company-lsp-enable-snippet t)
  ;    (company-lsp-cache-candidates nil)

  ;    :config
  ;    (add-to-list 'company-backends 'company-lsp)
  ; )
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dap-mode
    :ensure t
  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'python-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> t") 'pytest-one)
     (define-key evil-normal-state-map (kbd "<SPC> T a") 'pytest-all)
     (define-key evil-normal-state-map (kbd "<SPC> T b") 'pytest-module)
     (define-key evil-normal-state-map (kbd "<SPC> T p") 'pytest-pdb-one)
     (define-key evil-normal-state-map (kbd "<SPC> i") 'py-isort-buffer)
     (define-key evil-normal-state-map (kbd "<SPC> m d") 'dy-python-create-docstring)
     (define-key evil-visual-state-map (kbd "<SPC> m a") 'dy-python-dict-kwargs-toogle)
     (define-key evil-normal-state-map (kbd "<SPC> m i") 'dy-python-add-noqa)
     (define-key evil-normal-state-map (kbd "<SPC> m f") 'flycheck-list-errors)
     (define-key evil-normal-state-map (kbd "g d") 'lsp-find-definition)
     (define-key evil-normal-state-map (kbd "<SPC> =") 'lsp-format-buffer)
     (define-key evil-normal-state-map (kbd "<SPC> m R") 'run-python)
     (define-key evil-visual-state-map (kbd "<SPC> m r") 'python-shell-send-region)
     (define-key evil-normal-state-map (kbd "<SPC> m b") 'python-shell-send-buffer)
     (define-key evil-normal-state-map (kbd "<SPC> I") 'lsp-ui-imenu)
     ))
#+END_SRC

* Ansi-color
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ansi-color
    :ensure t
    :config 
    (defun colorize-compilation-buffer ()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    )
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :ensure t
    :config 
    (projectile-mode +1)
    (define-key evil-normal-state-map (kbd "<SPC> p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    (setq projectile-use-git-grep t)
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode t)
      )
    )
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

* Docker-compose
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-compose-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org
    :ensure t
    :custom
    (shell-file-name "bash" "default shell is bash")
    (org-confirm-babel-evaluate nil "Eval withour confirm")
    (org-display-inline-images t)
    (org-redisplay-inline-images t)
    (org-startup-with-inline-images "inlineimages")
    (org-agenda-files (list "~/org/agenda.org"))
    (org-log-done 'time)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (shell . t)
       (emacs-lisp . t)
       (plantuml . t)
       (sql . t)
       ))
    ; (use-package ob-translate
    ; :ensure t
    ; :config
    ; (org-babel-do-load-languages
    ;  'org-babel-load-languages
    ;  '((translate . t))))

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
  )

#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs  '(
                         "~/.emacs.d/snippets"                 ;; personal snippets
                         )
                       "Set yasnippet dir")
    :config
    (yas-global-mode 1)
  )
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rust-mode
    :ensure t
    :custom
    (rust-format-on-save t "Format rust code on save")
    (company-tooltip-align-annotations t "Company annotations")
    :mode ("\\rs\\'" . rust-mode)
    :config
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  )
#+END_SRC
** Racer
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package racer
    :ensure t
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'rust-mode-hook #'company-mode)
    (setq racer-rust-src-path "/home/dyens/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib")
  )
#+END_SRC

** Test at point
#+BEGIN_SRC emacs-lisp :results output silent
  (defun rust-test-buffer ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* ((project-root (projectile-ensure-project (projectile-project-root)))
          (relative-file (file-relative-name buffer-file-name project-root))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3))))
      (compile (format "%s test %s" rust-cargo-bin module-path))
    )
  )

  ;; Yes, i know. Its bullshit. It return first fn (name).
  ;; But for testing in general cases its ok.
  (defun rust-fname-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (save-excursion
      (re-search-backward
       "^[ \t]\\{0,4\\}\\(fn\\)[ \t]+\\([a-zA-Z0-9_]+\\)" nil t)
      (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
    )

  (defun rust-test-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* ((project-root (projectile-ensure-project (projectile-project-root)))
          (relative-file (file-relative-name buffer-file-name project-root))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3)))
          (fname (rust-fname-at-point))
          (test-module-name "tests"))
      (compile (format "%s test %s::%s::%s" rust-cargo-bin module-path test-module-name fname))
    )
  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'rust-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> m c") 'rust-run-clippy)
     (define-key evil-normal-state-map (kbd "<SPC> m C") 'rust-compile)
     (define-key evil-normal-state-map (kbd "<SPC> m r") 'rust-run)
     (define-key evil-normal-state-map (kbd "<SPC> T a") 'rust-test)
     (define-key evil-normal-state-map (kbd "g d") 'racer-find-definition)
     (define-key evil-normal-state-map (kbd "<SPC> T b") 'rust-test-buffer)
     (define-key evil-normal-state-map (kbd "<SPC> t") 'rust-test-at-point)
     ))
#+END_SRC

* Abbrev
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (clear-abbrev-table global-abbrev-table)

  (define-abbrev-table 'global-abbrev-table
    '(

      ;; net abbrev
      ("afaik" "as far as i know" )
      ))

  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table))

  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("ass" "assert")
      ("fr" "from")
      ("imp" "import")
      ("tr" "import pdb; pdb.set_trace()")

      ))

  (set-default 'abbrev-mode t)

  (setq save-abbrevs nil)
#+END_SRC

* Post Settings
** Quit minibuffer by one escape
#+BEGIN_SRC emacs-lisp :results output silent
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
  ;; (define-key ido-completion-map (kbd "<escape") 'ido-exit-minibuffer
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-tramp
    :ensure t
    :config 
    )
#+END_SRC

* Plantuml
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package plantuml-mode
    :ensure t
    :mode ("\\plantuml\\'" . plantuml-mode)
    :custom
    (plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    (org-plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
    )
#+END_SRC

* Org-jira
; #+BEGIN_SRC emacs-lisp :results output silent
;   (use-package org-jira
;     :ensure t
;     :custom
;     (jiralib-url "https://jira.cindicator.net")
;     :config
;     )
; #+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package expand-region
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "<SPC> e") 'er/expand-region)
    )
#+END_SRC
* Emojify
#+BEGIN_SRC emacs-lisp :results output silent
;  (use-package emojify
;    :ensure t
;    :config
;    (add-hook 'after-init-hook #'global-emojify-mode)
;    )
#+END_SRC

* Daemon
Need set in .zshrc 

alias em="emacsclient -c -a emacs"
#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
#+END_SRC

* Mail
; http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html
; Install isync / mbsync
; 
; #+BEGIN_SRC emacs-lisp :results output silent
; 
; (add-to-list 'load-path "/opt/mu/mu4e")
; 
; (require 'mu4e)
; 
;     (setq mu4e-maildir (expand-file-name "~/email"))
;     (setq mu4e-sent-folder   "/mail/Sent Items")
;     (setq mu4e-drafts-folder "/mail/Drafts")
;     (setq mu4e-trash-folder  "/mail/Trash")
;     ; get mail
;     (setq mu4e-get-mail-command "mbsync -a"
;           mu4e-html2text-command "w3m -T text/html"
;           mu4e-update-interval 120
;           mu4e-headers-auto-update t
;           mu4e-compose-signature-auto-include nil)
;   
;     (setq mu4e-maildir-shortcuts
;           '( ("/mail/INBOX"               . ?i)
;              ("/mail/Sent Items"   . ?s)
;              ("/mail/Trash"       . ?t)
;              ("/mail/Drafts"    . ?d)))
; 
; #+END_SRC


#TODO https://github.com/emacs-evil/evil-collection
* Aspell
#+BEGIN_SRC emacs-lisp :results output silent
  (setq ispell-program-name "aspell")
#+END_SRC

* Dy surround
#+BEGIN_SRC emacs-lisp :results output silent
  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defconst dy-insert-pair-alist
    '(("' Single quote" . (39 39))           ; ' '
      ("\" Double quotes" . (34 34))         ; " "
      ("` Elisp quote" . (96 39))            ; ` '
      ("‘ Single apostrophe" . (8216 8217))  ; ‘ ’
      ("“ Double apostrophes" . (8220 8221)) ; “ ”
      ("( Parentheses" . (40 41))            ; ( )
      ("{ Curly brackets" . (123 125))       ; { }
      ("[ Square brackets" . (91 93))        ; [ ]
      ("< Angled brackets" . (60 62))        ; < >
      ("« tree brakets" . (171 187))) ; « »
    "Alist of pairs for use with.")

  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defun dy-insert-pair-completion (&optional arg)
    "Insert pair from."
    (interactive "P")
    (let* ((data dy-insert-pair-alist)
           (chars (mapcar #'car data))
           (choice (completing-read "Select character: " chars nil t))
           (left (cadr (assoc choice data)))
           (right (caddr (assoc choice data))))
      (insert-pair arg left right)))

  (define-key evil-visual-state-map (kbd "<SPC> q") 'dy-insert-pair-completion)
#+END_SRC
* Dy capitalize first char
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC
* Google-translate
#+BEGIN_SRC emacs-lisp :results output silent
;    (use-package google-translate
;      :ensure t
;      :config
;  ;      (use-package google-translate-default-ui
;  ;      :ensure t
;  ;      :config
;      (define-key evil-normal-state-map (kbd "<SPC> l l") 'google-translate-at-point)
;      (define-key evil-normal-state-map (kbd "<SPC> l L") 'google-translate-at-point-reverse)
;
;      (define-key evil-normal-state-map (kbd "<SPC> L l") 'google-translate-query-translate)
;      (define-key evil-normal-state-map (kbd "<SPC> L L") 'google-translate-query-translate-reverse)
;
;      (setq google-translate-default-source-language "en")
;      (setq google-translate-default-target-language "ru")
;  ;   )
;      )
#+END_SRC
* Smerge
** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'smerge-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> j") 'smerge-next)
     (define-key evil-normal-state-map (kbd "<SPC> k") 'smerge-prev)
     (define-key evil-normal-state-map (kbd "<SPC> <SPC>") 'smerge-keep-current)
     (define-key evil-normal-state-map (kbd "<SPC> h") 'smerge-keep-other)
     (define-key evil-normal-state-map (kbd "<SPC> l") 'smerge-keep-mine)
     ))
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp :results output silent
    (use-package zoom
      :ensure t
      :custom
      (zoom-mode t)
      :config
      (defun size-callback ()
      (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
              (t                            '(0.5 . 0.5))))

      (custom-set-variables '(zoom-size 'size-callback)))
#+END_SRC

* Lilypond
#+BEGIN_SRC emacs-lisp :results output silent
(setq load-path (append (list (expand-file-name "lilypond" init-dir)) load-path))
  (autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
  (add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
  (add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))
  (add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
#+END_SRC

