#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

Deffered compilation
https://masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation

#+BEGIN_SRC emacs-lisp :results output silent
(setq comp-deferred-compilation t)
#+END_SRC

Set credentials
#+BEGIN_SRC emacs-lisp :results output silent
  (setq user-full-name "Alexander Kapustin")
  (setq user-mail-address "dyens@mail.ru")
#+END_SRC

Be sure to just ask for y/n instead of yes/no.
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable startup secreen.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq inhibit-startup-screen t)
#+END_SRC

Base settings
#+BEGIN_SRC emacs-lisp :results output silent
;; Scrolling
(setq mouse-wheel-scroll-amount '(1)    ; scroll gentle
      mouse-wheel-progressive-speed nil ; don't accelerate
      scroll-conservatively 101         ; don't jump to the middle of screen
      hscroll-margin 1                  ; don't you scroll that early!
      hscroll-step 1                    ; but scroll just a bit
      scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp :results output silent
(global-display-line-numbers-mode)
#+END_SRC

Search for non ascii characters
https://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html
#+BEGIN_SRC emacs-lisp :results output silent
  (setq search-default-mode #'char-fold-to-regexp)
#+END_SRC
* Installing use-package
** Setup
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
For refresh packages run (M-x package-refresh-contents)

** straight.el

Trying out =straight.el= for package management.  So far so good!

#+BEGIN_SRC emacs-lisp :results output silent
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Always use straight to install on systems other than Linux
  (setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)
#+END_SRC

* Backup
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are
the files ending in ~ that are cluttering up your directory lists. The
following code stashes them all in ~/.emacs.d/backups, where I can
find them with C-x C-f (find-file) if I really need to.
#+BEGIN_SRC emacs-lisp :results output silent
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* History
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are
the files ending in ~ that are cluttering up your directory lists. The
following code stashes them all in ~/.emacs.d/backups, where I can
find them with C-x C-f (find-file) if I really need to.
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

* GUI
** Disable bars
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode -1)
#+END_SRC

** Column number mode
#+BEGIN_SRC emacs-lisp :results output silent
;(setq column-number-mode t) ;; show columns in addition to rows in mode line
#+END_SRC

** Paren mode
#+BEGIN_SRC emacs-lisp :results output silent
  (show-paren-mode)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :results output silent

;;(use-package color-theme-sanityinc-tomorrow
;;  :ensure t
;;  :config
;;  (color-theme-sanityinc-tomorrow-night))

;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox t))
(load-theme 'wombat t)
;; (load-theme 'deeper-blue t)

;;  (use-package apropospriate-theme
;;    :ensure t
;;    :config 
;;    (load-theme 'apropospriate-dark t)
;;    ;; or
;;    ;; (load-theme 'apropospriate-light t)
;;  )

  ;;  (use-package modus-operandi-theme
  ;;    :ensure t)
  ;;
  ;;  (use-package modus-vivendi-theme
  ;;    :ensure t)
  ;;
  ;;  (load-theme 'modus-operandi t)           ; Light theme

   ;; (load-theme 'apropospriate-dark t)
   ;; (global-hl-line-mode t)




  ;; My default theme
(defun dy-light-theme ()
    (scroll-bar-mode 0)
    (fringe-mode 0)
    
    (set-face-attribute 'mode-line nil :box nil)
    (set-face-attribute 'mode-line-inactive nil :box nil)
    
    (set-face-attribute 'mode-line nil :background "#c6edf9")
    (set-face-attribute 'mode-line-inactive nil :background "#FAFAFA")
    
    (set-face-background 'vertical-border "gray")
    (set-face-foreground 'vertical-border (face-background 'vertical-border)))
  
;; (dy-light-theme)


    ; (load-theme 'adwaita t)
    ; (load-theme 'gruvbox-dark-hard t)
    ; (load-theme 'gruber-darker t)

    ; (load-theme 'dracula t)

    ; (require 'doom-themes)

    ;; Global settings (defaults)
    ; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;     doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    ; (load-theme 'whiteboard t)

    ;; Enable flashing mode-line on errors
    ; (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ; (doom-themes-neotree-config)
    ;; or for treemacs users
    ; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ; (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    ; (doom-themes-org-config)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp :results output silent
  (global-prettify-symbols-mode 1)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :results output silent
(set-face-attribute 'default nil
                    :family "Iosevka SS04"
                    :height 110
                    :weight 'regular
                    :width 'normal
)
#+END_SRC
** Winner mode
#+BEGIN_SRC emacs-lisp :results output silent
;; C-c left - undo
;; C-c rignt - redo
(winner-mode t)
#+END_SRC

* String-inflection
#+BEGIN_SRC emacs-lisp :results output silent
(use-package string-inflection
  :ensure t
)
#+END_SRC
* Evil mode
#+BEGIN_SRC emacs-lisp :results output silent

;; for work with abc_abc words
(with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol)
    ;; make evil-search-word look for symbol rather than word boundaries
    (setq-default evil-symbol-word-search t))

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  ;; Put a cursor to a new window
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config 
  (evil-mode 1)
  ;; With new evil changes and new emacs evil use different undo systemes
  (evil-set-undo-system 'undo-redo)

  (define-key evil-normal-state-map (kbd "<SPC> f") 'find-file)
  (define-key evil-normal-state-map (kbd "<SPC> b") 'switch-to-buffer)
  (define-key evil-normal-state-map (kbd "<SPC> i") 'consult-imenu)
  (define-key evil-normal-state-map (kbd "<SPC> I") 'consult-imenu-multi)
  (define-key evil-normal-state-map (kbd "<SPC> s") 'consult-ripgrep)

  (define-key evil-normal-state-map (kbd "<SPC> 1") 'winum-select-window-1)
  (define-key evil-normal-state-map (kbd "<SPC> 2") 'winum-select-window-2)
  (define-key evil-normal-state-map (kbd "<SPC> 3") 'winum-select-window-3)
  (define-key evil-normal-state-map (kbd "<SPC> 4") 'winum-select-window-4)
  (define-key evil-normal-state-map (kbd "<SPC> 5") 'winum-select-window-5)
  (define-key evil-normal-state-map (kbd "<SPC> 6") 'winum-select-window-6)

  (define-key evil-normal-state-map (kbd "<SPC> g") 'magit-status)
  (define-key evil-normal-state-map (kbd "<SPC> a a") 'org-agenda)
  (define-key evil-normal-state-map (kbd "<SPC> a c") 'org-capture)

  (define-key evil-normal-state-map (kbd "<SPC> c") 'compile)

  (define-key evil-normal-state-map (kbd "<SPC> #") 'comment-line)
  (define-key evil-visual-state-map (kbd "<SPC> #") 'comment-line)

  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  ;; Instead of C-u
  (define-key evil-normal-state-map (kbd "<SPC> u") 'universal-argument)
  (define-key evil-insert-state-map (kbd "C-l") 'yas-expand-from-trigger-key)

  (define-key evil-normal-state-map (kbd "<SPC> l") 'perspective-map)

  ;; fast function
  (define-key evil-normal-state-map (kbd "<SPC> ~") 'dy-set-fast-function)
  (define-key evil-visual-state-map (kbd "<SPC> ~") 'dy-set-fast-function)

  (defun dy-function-not-found ()
    "Function is not find"
    (interactive)
    (error "Fast function is not defined: use dy-set-fast-function"))

  (define-key evil-normal-state-map (kbd "<SPC> `") 'dy-function-not-found)

  )

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-string-inflection
  :after evil
  :ensure t
)

#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp :results output silent
(use-package vertico
:ensure t
:init
(vertico-mode))
#+END_SRC
* Orderless
#+BEGIN_SRC emacs-lisp :results output silent
(use-package orderless
  :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
* Savehist
#+BEGIN_SRC emacs-lisp :results output silent
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+END_SRC
* Marginalia
#+BEGIN_SRC emacs-lisp :results output silent
(use-package marginalia
  :ensure t
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+END_SRC

* Consult
#+BEGIN_SRC emacs-lisp :results output silent
(use-package consult
:ensure t
:config
(setq consult-preview-key nil))
#+END_SRC

* Embark
#+BEGIN_SRC emacs-lisp :results output silent
(use-package embark
:ensure t
:bind
(("C-." . embark-act)
 ("C-h B" . embark-bindings)))

(use-package embark-consult
:after embark
:ensure t)
#+END_SRC

* Super-word-mode
For backward word and forwardword
#+BEGIN_SRC emacs-lisp :results output silent
  (superword-mode t)
#+END_SRC

* Winum
#+BEGIN_SRC emacs-lisp :results output silent
(use-package winum
  :ensure t
  :after compilation-mode
  :config 
  (winum-mode)
  (define-key compilation-mode-map (kbd "<SPC> 1") 'winum-select-window-1)
  (define-key compilation-mode-map (kbd "<SPC> 2") 'winum-select-window-2)
  (define-key compilation-mode-map (kbd "<SPC> 3") 'winum-select-window-3)
  (define-key compilation-mode-map (kbd "<SPC> 4") 'winum-select-window-4)
  (define-key compilation-mode-map (kbd "<SPC> 5") 'winum-select-window-5)
  (define-key compilation-mode-map (kbd "<SPC> 6") 'winum-select-window-6)
  )
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :results output silent
(use-package magit
  :ensure t
  :commands magit-status
  )
#+END_SRC

* Forge
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package forge
    :after magit
    :ensure t
    )
#+END_SRC

* Company-mode
#+BEGIN_SRC emacs-lisp :results output silent
(use-package company
  :ensure t
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay 0.3)
  (company-minimum-prefix-length 1)
  (company-show-numbers nil)
  (company-tooltip-align-annotations 't)
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  )
#+END_SRC

* Python
** Yapfify
#+BEGIN_SRC emacs-lisp :results output silent
(use-package yapfify
  :ensure t
  :after python)

#+END_SRC
** Python mode
#+BEGIN_SRC emacs-lisp :results output silent
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :after (flycheck)
  :config

  (setq python-indent-def-block-scale 1)
  (add-hook 'python-mode-hook 'dy-python-setup)
  ; Based on
  ; https://stackoverflow.com/questions/31443527/how-can-i-make-flycheck-use-virtualenv.
  ; Depends on modifying Python's sys.path in .pylintrc as in
  ; https://stackoverflow.com/a/39207275/437583 for this to work.
  (defun set-flychecker-executables ()
    "Configure virtualenv for flake8 and lint."
    (when (executable-find "flake8")
    (flycheck-set-checker-executable (quote python-flake8)
                                  (executable-find "flake8")))
    (when (executable-find "mypy")
    (flycheck-set-checker-executable (quote python-mypy)
                                  (executable-find "mypy"))))

  (defun dy-python-setup ()
    ; Check with flake8, pylint, and mypy. python-mypy already runs
    ; python-flake8, so there's no need to mention it here. However, we still
    ; need to mention python-pylint to run after python-flake8. This is a
    ; so-called "checker chain", as per
    ; https://www.flycheck.org/en/latest/user/syntax-checkers.html#configuring-checker-chains.
    (flycheck-add-next-checker 'python-flake8 'python-pylint)
    (add-hook 'flycheck-before-syntax-check-hook #'set-flychecker-executables
      'local)
    ; Start Flycheck.
    (flycheck-mode)
    ; Set max line length to 79 characters (from PEP8). (Although Emacs columns
    ; are 0-indexed, column-enforce-mode counts from 1, so we use 79 here and
    ; not 78.)
    (setq column-enforce-column 79)
    ; We need to tell Emacs to do paragrah-filling at 79 caharacters
    ; (column-enforce-mode only highlights regions --- it does not change how
    ; paragraph filling is done).
    (setq fill-column 79)))



#+END_SRC
** Virtualenv
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pyvenv
    :ensure t
    :config
    (defun pipenvenv-old ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.virtualenvs")
        )

    (defun pipenvenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.local/share/virtualenvs")
        )
    (defun poetryenv ()
      (interactive)
      (setenv "WORKON_HOME" "/home/dyens/.cache/pypoetry/virtualenvs/")
      )
    ;; default env
    (poetryenv)
    )
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :ensure t
    )
#+END_SRC

** Py-isrot
#+BEGIN_SRC emacs-lisp :results output silent
(use-package py-isort
  :ensure t
  )
#+END_SRC
** Remove font lock from python shell
#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-enable-font-lock nil)
#+END_SRC
** Pytest
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package pytest
    :ensure t
    :config
    (custom-set-variables '(pytest-project-root-files '(".projectile" "setup.py" ".hg" ".git")))
    )
#+END_SRC

** DyPython
#+BEGIN_SRC emacs-lisp :results output silent
  (require 'flycheck)

  ;; TODO if noqa exist - extend it
  (defun dy-python-add-noqa()
    "Add noqa for error string"
    (interactive)
    (save-excursion
      (let* ((errors (flycheck-overlay-errors-at (point)))
             (error-codes (seq-uniq (seq-map 'flycheck-error-id errors)))
             (error-string (mapconcat 'identity error-codes ","))
             (noqa-mes (format "  # NOQA:%s" error-string)))
        (move-end-of-line nil)
        (insert noqa-mes)
        )))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
  (require 'python)
  ; for using string-trim
  (require 'subr-x)

  (defun dy-python-arg-params(arg-string)
    "Get python argument params from argument string (name, type, default)."
    (let* (
           (arg-value (split-string arg-string "[[:blank:]]*=[[:blank:]]*" t))
           (name-type-string (car arg-value))
           (name-type (split-string name-type-string "[[:blank:]]*:[[:blank:]]*" t))
           (name (car name-type))
           (type (nth 1 name-type))
           (default-value (nth 1 arg-value))
           )
      (list name type default-value)))

  (defun dy-python-split-args (arg-string)
    "Split a python argument string into ((name, type, default)..) tuples"
    (let* (
           (args (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t))
           (args (seq-filter (lambda (x) (not (string-blank-p x))) args))
           (args (mapcar 'string-trim args))
           (arg-values (mapcar 'dy-python-arg-params args))
           )
      arg-values))


  (defun dy-python-args-to-docstring (args-string identation)
    "return docstring format for the python arguments in yas-text"
    (let* (
           (args (dy-python-split-args args-string))
           (args (if (string= (nth 0 (car args)) "self")
                     (cdr args)
                   args))
           (ident (make-string identation ?\s))
           (format-arg (lambda (arg)
                         (concat
                          ident
                          ":param "
                          (nth 0 arg)
                          ": " (nth 0 arg)
                          (if (nth 2 arg) (concat ", default=" (nth 2 arg)))
                          (if (nth 1 arg) (concat
                                       "\n"
                                       ident
                                       ":type "
                                       (nth 0 arg)
                                       ": "
                                       (nth 1 arg)
                                       ))
                          )
                         )
                       )
           (formatted-params (mapconcat format-arg args "\n")))
      (unless (string= formatted-params "")
        (mapconcat 'identity
                   (list  formatted-params)
                   "\n"))))



  (defun dy-python-return-to-docstring (return-string identation)
    "return docstring format for the python return type"
    (let* (
           (return-type (car (split-string return-string "[[:blank:]]*->[[:blank:]]*" t)))
           (ident (make-string identation ?\s))
           (formated-return (format "%s:rtype: %s" ident return-type)))
      (unless (string= return-type "nil") formated-return)))


  (add-hook 'dy-python-mode-hook
            (lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))


(defun dy--python-add-docstring-to-function ($fname $fargs-string $docstring-shift)
  "Add docstring to function."
  (let ($fargs $docstring $docstring-header $docstring-args)
    (setq $docstring-header
	  (dy-capitalize-first-char (replace-regexp-in-string (regexp-quote "_") " " $fname)))

    (setq $fargs (dy-python-split-args $fargs-string))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (setq $docstring-header (format "\"\"\"%s." $docstring-header))
    (insert $docstring-header)
    (setq $fargs
	  (seq-filter (lambda (arg)
			 (let ((var-name (car arg)))
			       (and
				(not (string= "self" var-name))
				(not (string= "*" var-name))
				)))
		      $fargs))
    (message "%s" $fargs)
    (setq $docstring-args
      (mapcar
       (lambda (arg)
         (format ":param %s: %s"
    	     (car arg)
    	     (replace-regexp-in-string (regexp-quote "_") " " (car arg))))
       $fargs))
    (when $docstring-args
      (insert "\n")
      (dolist (arg $docstring-args)
    (insert "\n")
    (insert $docstring-shift)
    (insert arg))
      (insert "\n")
      (insert $docstring-shift)
      )
    (insert "\"\"\"")
  ))


(defun dy--python-add-docstring-to-class ($classname $docstring-shift)
  "Add docstring to class."
  (let ($classdocstring (case-fold-search nil))
    (message "%s" $classname)
    (setq $classdocstring (replace-regexp-in-string "\\([A-Z]\\)" " \\1" $classname))
    (setq $classdocstring (string-trim $classdocstring))
    (setq $classdocstring (downcase $classdocstring))
    (setq $classdocstring (dy-capitalize-first-char $classdocstring))
    (search-forward  ":")
    (insert "\n")
    (insert $docstring-shift)
    (insert "\"\"\"")
    (insert $classdocstring)
    (insert ".\"\"\"")
    ))

(defun dy-python-create-docstring ()
  "return docstring format for the python return type"
  (interactive)
    (python-nav-beginning-of-defun 1)
    ; jump to first now-whitespace symbol
    (back-to-indentation)
    (let* (
	  ($block-type (thing-at-point 'word))
	  ($block-start (current-column))
	  ($docstring-shift (make-string (+ 4 $block-start) 32))
	  )
      (cond
       ((string= $block-type "class")
	(let ($classname)
	  (re-search-forward
	   "[ \t]*class[ \t]*\\([a-zA-Z0-9_]+\\)" nil t)
	    (setq $classname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (dy--python-add-docstring-to-class $classname $docstring-shift)
	))
       ((string= $block-type "async")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*async[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n\*]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift)))
       ((string= $block-type "def")
	(let ($fname $fargs-string $fargs $docstring $docstring-header $docstring-args)
	  (re-search-forward
	   "[ \t]*def[ \t]*\\([a-zA-Z0-9_]+\\)[ \t]*\(\\([a-zA-Z0-9_\, \t\:=\n\*]*\\)\)" nil t)
	    (setq $fname (buffer-substring-no-properties (match-beginning 1) (match-end 1)))
	    (setq $fargs-string (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
	    (dy--python-add-docstring-to-function $fname $fargs-string $docstring-shift))))))

  (defun dy-python-kwargs-to-dict ($start $end)
    "Convert kwargs arguments to dict.
     a=1, b=2 -> 'a': 1, 'b': 2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "\\([_0-9a-zA-Z]+\\)\s*=\s*" "'\\1': ")
         ))

  (defun dy-python-dict-to-kwargs ($start $end)
    "Convert dict arguments to kwargs.
     'a': 1, 'b': 2 -> a=1, b=2
    "
    (interactive "r")
    (save-restriction
         (narrow-to-region $start $end)
         (goto-char (point-min))
         (replace-regexp "'\\([_0-9a-zA-Z]+\\)'\s*:\s*" "\\1=")
         ))


  (defun dy-python-dict-kwargs-toogle ($start $end)
    "Convert toogle dict kwargs args."
    (interactive "r")
    (if (seq-contains (buffer-substring $start $end) ?=)
        (dy-python-kwargs-to-dict $start $end)
      (dy-python-dict-to-kwargs $start $end)))

  (defun dy-py-split-string (&optional comma line-length)
    "Split string to multiple."
    (interactive)
    (unless comma (setq comma "'"))
    (unless line-length (setq line-length 70))
    (let (start (string-ended nil))
      (save-excursion
        (search-backward comma)
        (setq start (point))
        (insert "(\n")
        (indent-according-to-mode)
        (goto-char (+ 1(point)))
        (while (not string-ended)
  	(re-search-forward (format "[[:space:]%s]" comma))
  	(if (equal (buffer-substring-no-properties (match-beginning 0) (match-end 0)) " ")
  	    (if (>= (current-column) line-length)
  		(progn
  		(insert (format "%s\n%s" comma comma))
  		(indent-according-to-mode))
  	      )
  	  (setq string-ended 't)
  	  )
        )
        (insert "\n)")
        (indent-according-to-mode)
      )
    )
  )
 
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp :results output silent


(use-package lsp-mode
  :ensure t
  :commands lsp
  :config
  ;; Disable automatic set flycheck-checker to lsp
  (setq lsp-diagnostic-package :none)
  (setq lsp-auto-guess-root t)
  (setq lsp-prefer-flymake nil)

  (setq lsp-enable-snippet t)
  (setq lsp-idle-delay 0.500)
  (setq lsp-headerline-breadcrumb-enable nil)

  ; (setq-default lsp-pyls-configuration-sources ["flake8"])
  (setq lsp-pyls-plugins-pycodestyle-enabled nil
        lsp-pyls-plugins-pyflakes-enabled nil
        lsp-pyls-plugins-flake8-enabled t
  )

  (setq lsp-rust-server 'rust-analyzer)
  )

(use-package ccls
    :ensure t
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))


;; (use-package lsp-python-ms
;;   :ensure t
;;   :init (setq lsp-python-ms-auto-install-server t)
;;   :hook (python-mode . (lambda ()
;;                           (require 'lsp-python-ms)
;;                           (setq-local ms-python-python-lint-enabled nil)
;;                           (lsp)
;;         ))
;;   )  ; or lsp-deferred


(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

(use-package lsp-ui 
   :ensure t
   :custom
   (lsp-ui-doc-enable nil)
   :commands lsp-ui-mode
)

; (use-package company-lsp 
;    :ensure t
;    :commands company-lsp

;    :custom
;    (company-lsp-enable-snippet t)
;    (company-lsp-cache-candidates nil)

;    :config
;    (add-to-list 'company-backends 'company-lsp)
; )
#+END_SRC
company-backends

#+BEGIN_SRC emacs-lisp :results output silent
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent
;;  (use-package dap-mode
;;    :ensure t
;;  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook
 'python-mode-hook
 (lambda()
   (define-key evil-normal-state-map (kbd "<SPC> t") 'pytest-one)
   (define-key evil-normal-state-map (kbd "<SPC> T a") 'pytest-all)
   (define-key evil-normal-state-map (kbd "<SPC> T b") 'pytest-module)
   (define-key evil-normal-state-map (kbd "<SPC> T p") 'pytest-pdb-one)
   (define-key evil-normal-state-map (kbd "<SPC> i") 'py-isort-buffer)
   (define-key evil-normal-state-map (kbd "<SPC> m d") 'dy-python-create-docstring)
   (define-key evil-visual-state-map (kbd "<SPC> m a") 'dy-python-dict-kwargs-toogle)
   (define-key evil-normal-state-map (kbd "<SPC> m i") 'dy-python-add-noqa)
   (define-key evil-normal-state-map (kbd "<SPC> m s") 'dy-py-split-string)
   (define-key evil-normal-state-map (kbd "<SPC> m f") 'flycheck-list-errors)
   (define-key evil-normal-state-map (kbd "g d") 'lsp-find-definition)
   (define-key evil-normal-state-map (kbd "<SPC> =") 'yapfify-region-or-buffer)
   (define-key evil-normal-state-map (kbd "<SPC> m R") 'run-python)
   (define-key evil-visual-state-map (kbd "<SPC> m r") 'python-shell-send-region)
   (define-key evil-normal-state-map (kbd "<SPC> m b") 'python-shell-send-buffer)
   (define-key evil-normal-state-map (kbd "<SPC> I") 'lsp-ui-imenu)
   ))
#+END_SRC

* Ansi-color
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ansi-color
    :ensure t
    :config 
    (defun colorize-compilation-buffer ()
      (toggle-read-only)
      (ansi-color-apply-on-region compilation-filter-start (point))
      (toggle-read-only))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    )
#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode)
    )
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :results output silent
(use-package projectile
  :ensure t
  :config 
  (projectile-mode +1)
  (define-key evil-normal-state-map (kbd "<SPC> p") 'projectile-command-map)
  (setq projectile-use-git-grep t)
  (setq projectile-completion-system 'default))
#+END_SRC
* Docker
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dockerfile-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
  )
#+END_SRC

* Docker-compose
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-compose-mode
    :ensure t
    :mode ("\\Dockerfile\\'" . dockerfile-mode)
  )
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :results output silent
(use-package org
  :ensure t
  :custom
  (shell-file-name "bash" "default shell is bash")
  (org-confirm-babel-evaluate nil "Eval withour confirm")
  (org-display-inline-images t)
  (org-redisplay-inline-images t)
  (org-startup-with-inline-images "inlineimages")
  (org-startup-folded t)
  (org-agenda-files (list "~/org/agenda.org"))
  (org-log-done 'time)
  ;; Remove tab useless source block identation
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (emacs-lisp . t)
     (plantuml . t)
     (sql . t)
     ))
  ; (use-package ob-translate
  ; :ensure t
  ; :config
  ; (org-babel-do-load-languages
  ;  'org-babel-load-languages
  ;  '((translate . t))))
  (setq org-clock-sound "~/.emacs.d/alarm.wav")
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (setq org-capture-templates
         '(("t" "Tasks" entry (file+headline "~/org/agenda.org" "Tasks")
  	  "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n" )))
)

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+END_SRC

* Yas
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :ensure t
    :custom
    (yas-snippet-dirs  '(
                         "~/.emacs.d/snippets"                 ;; personal snippets
                         )
                       "Set yasnippet dir")
    :config
    (yas-global-mode 1)
  )
#+END_SRC

* Rust
#+BEGIN_SRC emacs-lisp :results output silent
 ;; (use-package rust-mode
 ;;   :ensure t
 ;;   :custom
 ;;   (rust-format-on-save t "Format rust code on save")
 ;;   (company-tooltip-align-annotations t "Company annotations")
 ;;   :mode ("\\rs\\'" . rust-mode)
 ;;   :config
 ;;   (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
 ;; )
#+END_SRC

** Racer
#+BEGIN_SRC emacs-lisp :results output silent
;;  (use-package racer
;;    :ensure t
;;    :config
;;    (add-hook 'rust-mode-hook #'racer-mode)
;;    (add-hook 'racer-mode-hook #'eldoc-mode)
;;    (add-hook 'rust-mode-hook #'company-mode)
;;    (setq racer-rust-src-path "/home/dyens/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib")
;;  )
#+END_SRC

** Test at point
#+BEGIN_SRC emacs-lisp :results output silent
  (defun rust-test-buffer ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* ((project-root (projectile-ensure-project (projectile-project-root)))
          (relative-file (file-relative-name buffer-file-name project-root))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3))))
      (compile (format "%s test %s" rust-cargo-bin module-path))
    )
  )

  ;; Yes, i know. Its bullshit. It return first fn (name).
  ;; But for testing in general cases its ok.
  (defun rust-fname-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (save-excursion
      (re-search-backward
       "^[ \t]\\{0,4\\}\\(fn\\)[ \t]+\\([a-zA-Z0-9_]+\\)" nil t)
      (buffer-substring-no-properties (match-beginning 2) (match-end 2)))
    )

  (defun rust-test-at-point ()
    "Test buffer using `cargo test`"
    (interactive)
    (let* ((project-root (projectile-ensure-project (projectile-project-root)))
          (relative-file (file-relative-name buffer-file-name project-root))
          (splitted-path (split-string relative-file "/"))
          (module-path-with-rs (string-join (cdr splitted-path) "::"))
          (module-path (substring module-path-with-rs 0 (- (length module-path-with-rs) 3)))
          (fname (rust-fname-at-point))
          (test-module-name "tests"))
      (compile (format "%s test %s::%s::%s" rust-cargo-bin module-path test-module-name fname))
    )
  )
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'rust-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> m c") 'rust-run-clippy)
     (define-key evil-normal-state-map (kbd "<SPC> m C") 'rust-compile)
     (define-key evil-normal-state-map (kbd "<SPC> m r") 'rust-run)
     (define-key evil-normal-state-map (kbd "<SPC> T a") 'rust-test)
     (define-key evil-normal-state-map (kbd "g d") 'racer-find-definition)
     (define-key evil-normal-state-map (kbd "<SPC> T b") 'rust-test-buffer)
     (define-key evil-normal-state-map (kbd "<SPC> t") 'rust-test-at-point)
     ))
#+END_SRC

* Abbrev
** Settings
#+BEGIN_SRC emacs-lisp :results output silent
  (clear-abbrev-table global-abbrev-table)

  (define-abbrev-table 'global-abbrev-table
    '(

      ;; net abbrev
      ("afaik" "as far as i know" )
      ))

  (when (boundp 'python-mode-abbrev-table)
    (clear-abbrev-table python-mode-abbrev-table))

  (define-abbrev-table 'python-mode-abbrev-table
    '(
      ("ass" "assert")
      ("fr" "from")
      ("imp" "import")
      ("tr" "import pdb; pdb.set_trace()")

      ))

  (set-default 'abbrev-mode t)

  (setq save-abbrevs nil)
#+END_SRC

* Post Settings
** Quit minibuffer by one escape
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (define-key ido-completion-map (kbd "<escape") 'ido-exit-minibuffer
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package docker-tramp
    :ensure t
    :config 
    )
#+END_SRC

* Plantuml
#+BEGIN_SRC emacs-lisp :results output silent
(use-package plantuml-mode
  :ensure t
  :defer t
  :mode ("\\plantuml\\'" . plantuml-mode)
  :custom
  (plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
  (org-plantuml-jar-path "/home/dyens/.emacs.d/plantuml.jar")
  )
#+END_SRC

* Org-jira
; #+BEGIN_SRC emacs-lisp :results output silent
;   (use-package org-jira
;     :ensure t
;     :custom
;     (jiralib-url "https://jira.cindicator.net")
;     :config
;     )
; #+END_SRC

* Expand-region
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package expand-region
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "<SPC> e") 'er/expand-region)
    )
#+END_SRC
* Daemon
Need set in .zshrc 

alias em="emacsclient -c -a emacs"
#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
#+END_SRC

* Mail

#+BEGIN_SRC emacs-lisp :results output silent

;; First sudo dnf install maildir-utils
;; Setup mbrsync
;; Then init mu
;; mu init --maildir=~/mailbox --my-address=alexander.kapustin@quantumsoft.ru --my-address=akapustin@ambrahealth.com --my-address=dyens@mail.ru
;; mu index

(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")


(defun enter-mu4e-context-mail ()
  (setq mu4e-drafts-folder   "/mail/drafts"
        mu4e-sent-folder "/mail/sent"
        ;; mu4e-refile-folder  "/mail/[Gmail]/All Mail"
        mu4e-trash-folder  "/mail/trash"
        mu4e-maildir-shortcuts
        '((:maildir "/mail/inbox" :key ?i)
          (:maildir "/mail/sent"  :key ?s)
          (:maildir "/mail/trash" :key ?t))))

(defun enter-mu4e-context-ambra ()
  (setq mu4e-drafts-folder   "/ambra/[Gmail]/Drafts"
        mu4e-sent-folder "/ambra/[Gmail]/Sent Mail"
        ;; mu4e-refile-folder  "/ambra/[Gmail]/All Mail"
        mu4e-trash-folder  "/ambra/[Gmail]/Trash"
        mu4e-maildir-shortcuts
        '((:maildir "/ambra/inbox" :key ?i)
          (:maildir "/ambra/[Gmail]/Sent Mail" :key ?s)
          (:maildir "/ambra/[Gmail]/Trash" :key ?t))))

(defun enter-mu4e-context-quantumsoft ()
  (setq mu4e-drafts-folder   "/quantumsoft/[Gmail]/Drafts"
        mu4e-sent-folder "/quantumsoft/[Gmail]/Sent Mail"
        ;; mu4e-refile-folder  "/quantumsoft/[Gmail]/All Mail"
        mu4e-trash-folder  "/quantumsoft/[Gmail]/Trash"
        mu4e-maildir-shortcuts
        '((:maildir "/quantumsoft/inbox" :key ?i)
          (:maildir "/quantumsoft/[Gmail]/Sent Mail" :key ?s)
          (:maildir "/quantumsoft/[Gmail]/Trash" :key ?t))))

(setq dy-mu4e-bookmarks-mail
      '(("maildir:/mail/inbox" "Inbox" ?i)
        ("flag:unread AND to:dyens@mail.ru" "Unread messages" ?u)
        ("date:today..now AND to:dyens@mail.ru" "Today's messages" ?t)
        ("date:7d..now AND to:dyens@mail.ru" "Last 7 days" ?w)
        ("mime:image/* AND to:dyens@mail.ru" "Messages with images" ?p)))


(setq dy-mu4e-bookmarks-ambra
      '(("maildir:/ambra/inbox" "Inbox" ?i)
        ("flag:unread AND to:akapustin@ambrahealth.com" "Unread messages" ?u)
        ("date:today..now AND to:akapustin@ambrahealth.com" "Today's messages" ?t)
        ("date:7d..now AND to:akapustin@ambrahealth.com" "Last 7 days" ?w)
        ("mime:image/* AND to:akapustin@ambrahealth.com" "Messages with images" ?p)))


(setq dy-mu4e-bookmarks-quantumsoft
      '(("maildir:/quantumsoft/inbox" "Inbox" ?i)
        ("flag:unread AND to:akapustin@quantumsofthealth.ru" "Unread messages" ?u)
        ("date:today..now AND to:akapustin@quantumsofthealth.ru" "Today's messages" ?t)
        ("date:7d..now AND to:akapustin@quantumsofthealth.ru" "Last 7 days" ?w)
        ("mime:image/* AND to:akapustin@quantumsofthealth.ru" "Messages with images" ?p)))


(use-package mu4e
  :ensure nil
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/mailbox")
  (setq mu4e-bookmarks dy-mu4e-bookmarks-mail)

  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials
        '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials
        (expand-file-name "~/.authinfo")
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-debug-info t)

  (setq mu4e-contexts
        `(
         ;; Mail personal
         ,(make-mu4e-context
          :name "Mail"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/mail" (mu4e-message-field msg :maildir))))
          :vars `((user-mail-address . "dyens@mail.ru")
                  (smtpmail-starttls-credentials . '(("smtp.mail.com" 465 nil nil)))
                  (smtpmail-auth-credentials . (expand-file-name "~/.authinfo"))
                  (smtpmail-smtp-service . 465)
		    (smtpmail-smtp-user . "dyens@mail.ru")
	            (smtpmail-smtp-server . "smtp.mail.ru" )
                  (smtpmail-stream-type . ssl)
                  (mu4e-bookmarks . ,dy-mu4e-bookmarks-mail)
                  (user-full-name . "Kapustin Alexander"))
          :enter-func (lambda () (progn
                              (mu4e-message "Entering Mail Context")
                              (enter-mu4e-context-mail)))
          :leave-func (lambda () (mu4e-message "Leave Mail Context")))

         ;; Ambra work account
         ,(make-mu4e-context
          :name "Ambra"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/ambra" (mu4e-message-field msg :maildir))))
          :vars `((user-mail-address . "akapustin@ambrahealth.com")
		    (smtpmail-smtp-user . "akapustin@ambrahealth.com")
	            (smtpmail-smtp-server . "smtp.gmail.com" )
                  (mu4e-bookmarks . ,dy-mu4e-bookmarks-ambra)
                  (user-full-name    . "Kapustin Alexander"))
          :enter-func (lambda () (progn
                              (mu4e-message "Entering Ambra Context")
                              (enter-mu4e-context-ambra)))
          :leave-func (lambda () (mu4e-message "Leave Ambra Context")))

         ;; Quantumsoft work account
         ,(make-mu4e-context
          :name "Quantumsoft"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/quantumsoft" (mu4e-message-field msg :maildir))))
          :vars `((user-mail-address . "alexander.kapustin@quantumsoft.ru")
		    (smtpmail-smtp-user . "alexander.kapustin@quantumsoft.ru")
	            (smtpmail-smtp-server . "smtp.gmail.com" )
                  (mu4e-bookmarks . ,dy-mu4e-bookmarks-quantumsoft)
                  (user-full-name    . "Kapustin Alexander"))
          :enter-func (lambda () (progn
                              (mu4e-message "Entering Quantumsoft Context")
                              (enter-mu4e-context-quantumsoft)))
          :leave-func (lambda () (mu4e-message "Leave Quantumsoft Context"))))))
#+END_SRC




#TODO https://github.com/emacs-evil/evil-collection
* Aspell
#+BEGIN_SRC emacs-lisp :results output silent
  (setq ispell-program-name "aspell")
#+END_SRC

* Dy surround
#+BEGIN_SRC emacs-lisp :results output silent
  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defconst dy-insert-pair-alist
    '(("' Single quote" . (39 39))           ; ' '
      ("\" Double quotes" . (34 34))         ; " "
      ("` Elisp quote" . (96 39))            ; ` '
      ("‘ Single apostrophe" . (8216 8217))  ; ‘ ’
      ("“ Double apostrophes" . (8220 8221)) ; “ ”
      ("( Parentheses" . (40 41))            ; ( )
      ("{ Curly brackets" . (123 125))       ; { }
      ("[ Square brackets" . (91 93))        ; [ ]
      ("< Angled brackets" . (60 62))        ; < >
      ("« tree brakets" . (171 187))) ; « »
    "Alist of pairs for use with.")

  ;; From https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
  (defun dy-insert-pair-completion (&optional arg)
    "Insert pair from."
    (interactive "P")
    (let* ((data dy-insert-pair-alist)
           (chars (mapcar #'car data))
           (choice (completing-read "Select character: " chars nil t))
           (left (cadr (assoc choice data)))
           (right (caddr (assoc choice data))))
      (insert-pair arg left right)))

  (define-key evil-visual-state-map (kbd "<SPC> q") 'dy-insert-pair-completion)
#+END_SRC
* Dy capitalize first char
#+BEGIN_SRC emacs-lisp :results output silent
(defun dy-capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC
* Google-translate
#+BEGIN_SRC emacs-lisp :results output silent
(use-package popup
    :ensure t
 )
(use-package google-translate
    :ensure t
    :custom
    (google-translate-backend-method 'curl)
    :config
    ;; https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
    (define-key evil-normal-state-map (kbd "<SPC> r r") 'dy-google-translate)
    (define-key evil-normal-state-map (kbd "<SPC> r R") 'dy-google-translate-reverse)

    (define-key evil-visual-state-map (kbd "<SPC> r r") 'dy-google-translate)
    (define-key evil-visual-state-map (kbd "<SPC> r R") 'dy-google-translate-reverse)

    (define-key evil-normal-state-map (kbd "<SPC> r q") 'google-translate-query-translate)
    (define-key evil-normal-state-map (kbd "<SPC> r Q") 'google-translate-query-translate-reverse)
    (setq google-translate-default-source-language "en")
    (setq google-translate-default-target-language "ru"))
#+END_SRC
* Smerge
** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'smerge-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> j") 'smerge-next)
     (define-key evil-normal-state-map (kbd "<SPC> k") 'smerge-prev)
     (define-key evil-normal-state-map (kbd "<SPC> <SPC>") 'smerge-keep-current)
     (define-key evil-normal-state-map (kbd "<SPC> h") 'smerge-keep-other)
     (define-key evil-normal-state-map (kbd "<SPC> l") 'smerge-keep-mine)
     ))
#+END_SRC

* Lilypond
#+BEGIN_SRC emacs-lisp :results output silent
(setq load-path (append (list (expand-file-name "lilypond" init-dir)) load-path))
(autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
(add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
(add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))
(add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
#+END_SRC

* SLY
#+BEGIN_SRC emacs-lisp :results output silent
(use-package sly
  :ensure t)
#+END_SRC

* Tree sitter
#+BEGIN_SRC emacs-lisp :results output silent
(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
)
(use-package tree-sitter-langs
  :ensure t)
#+END_SRC

* Multiple Cursors
#+BEGIN_SRC emacs-lisp :results output silent
(use-package evil-multiedit
  :ensure t
  :config
  (require 'evil-multiedit)
  ;; Highlights all matches of the selection in the buffer.
  (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)
  
  ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
  ;; incrementally add the next unmatched match.
  (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Match selected region.
  (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Insert marker at point
  (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)
   ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))

#+END_SRC

* Widnow monocle
https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
#+BEGIN_SRC emacs-lisp :results output silent
(use-package emacs
  :config
  (defvar dy-window-configuration nil
    "Current window configuration.
Intended for use by `dy-window-monocle'.")

  (define-minor-mode dy-window-single-toggle
    "Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'."
    :lighter " [M]"
    :global nil
    (if (one-window-p)
        (when dy-window-configuration
          (set-window-configuration dy-window-configuration))
      (setq dy-window-configuration (current-window-configuration))
      (delete-other-windows)))

  (define-key evil-normal-state-map (kbd "<SPC> z") 'dy-window-single-toggle)
)

#+END_SRC

* Zoom
#+BEGIN_SRC emacs-lisp :results output silent
;; (use-package zoom
;;   :ensure t
;;   :custom
;;   (zoom-mode t)
;;   :config
;;   (defun dy-size-callback ()
;;     (cond ((> (frame-pixel-width) 1280) '(90 . 0.75))
;;           (t                            '(0.5 . 0.5))))
;;   (setq zoom-size 'dy-size-callback))
#+END_SRC
* Lua
#+BEGIN_SRC emacs-lisp :results output silent
(use-package lua-mode
  :ensure t)
#+END_SRC

* Org Roam
#+BEGIN_SRC emacs-lisp :results output silent

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org_roam")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-setup))
#+END_SRC

* Compilation mode
** Truncate compilation buffer
If in compilation buffer there are many lines it start to be a very slow
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'compilation-filter-hook 'comint-truncate-buffer)
(setq comint-buffer-maximum-size 2000)
#+END_SRC

** Scroll to the first error
#+BEGIN_SRC emacs-lisp :results output silent
(setq compilation-scroll-output 'first-error)
#+END_SRC

** COMMENT Notifications
#+BEGIN_SRC emacs-lisp :results output silent
(defcustom dy-notify-after-compilation nil "Notifcation after compilation" :type 'hook :options '(t nil) :group 'dy-settings)
;; (custom-set-variables '(dy-notify-after-compilation t))

(setq compilation-finish-functions
      (append compilation-finish-functions
          '(dy-local-notify-compilation-finish)))

(defcustom dy-compilation-notify nil
  "Non-nil means automatically frobnicate all buffers."
  :type 'boolean
  :require 'compilation-mode
  :group 'dy-custom)

(defun dy-local-notify-compilation-finish (buffer status)
  "Notify compilation finish."
  (if dy-notify-after-compilation
      (dy-notify "Compilation finished in Emacs" status)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp :results output silent
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom (
    (dired-listing-switches "-agho --group-directories-first")
    (dired-dwim-target t)
  )
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single
  :ensure t)

(use-package dired-open
  :ensure t
  :config
  ;; Doesn't work as expected!
  ;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mp4" . "mplayer"))))

#+END_SRC

* Eshell
#+BEGIN_SRC emacs-lisp :results output silent
;; From SystemCrafters
;; https://github.com/daviwil/emacs-from-scratch/blob/bbfbc77b3afab0c14149e07d0ab08d275d4ba575/Emacs.org#terminals
(defun dy-configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
 :ensure t
)

(use-package eshell
  :hook (eshell-first-time-mode . dy-configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vi")))

  (eshell-git-prompt-use-theme 'powerline)
)
#+END_SRC

* Perspective
#+BEGIN_SRC emacs-lisp :results output silent
(use-package perspective
  :ensure t
  :config
  (persp-mode)
)
(use-package persp-projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "s-s") 'projectile-persp-switch-project)
)

#+END_SRC
* C++
** Clang-Format
#+BEGIN_SRC emacs-lisp :results output silent
;; clang-format --style=google --dump-config > .clang-format 
(use-package clang-format
  :ensure t
)
#+END_SRC

** Bidnings
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook
   'c++-mode-hook
   (lambda()
     (define-key evil-normal-state-map (kbd "<SPC> =") 'clang-format-buffer)))
#+END_SRC

** Ggtags
#+BEGIN_SRC emacs-lisp :results output silent

(use-package ggtags
  :ensure t
  :config
    (add-hook 'c-mode-common-hook
            (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1)))))

;; (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
;; (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
;; (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
;; (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
;; (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
;; (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
;; 
;; (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC
* Dy
#+BEGIN_SRC emacs-lisp :results output silent

(defun dy-notify (text &optional body)
  "Desktop notify.

  After next building emacs (build with bus) use:
      (notifications-notify :text \"test\")
  "
  (interactive)
  (unless body (setq body ""))
  (call-process "notify-send" nil nil nil
		"-t" "0"
		"-i" "emacs"
		text
		body))

(defun dy-screaming-to-camel (s)
  "Convert screaming to camel case.
  Example:
      HELLO_WORLD -> HelloWorld
  " 
  (mapconcat 'capitalize (split-string s "_") ""))

(defun amb-java-to-python-storage-errors ()
  "Convert java storage errors to python"
  (interactive)
  (let* ((start (point))
	 (end (search-forward ")"))
	 (ex-definition (replace-regexp-in-string "[\s\n\t]+" " "(buffer-substring start end)))
	 (reg-exp "\\(.*\\)(\\(.*\\), \"\\(.*\\)\", \\(.*\\), \"\\(.*\\)\")")

	 )


    (when (string-match reg-exp ex-definition)
      (let ((class (match-string 1 ex-definition))
	    (storage-code (match-string 2 ex-definition))
	    (description (match-string 3 ex-definition))
	    (http-status-code (match-string 4 ex-definition))
	    (readable-status (match-string 5 ex-definition))
	    class-string
	    )
	(setq class (dy-screaming-to-camel (string-trim class)))
	(setq storage-code (string-trim storage-code))
	(setq description (string-trim description))
	(setq http-status-code (nth 1 (split-string (string-trim http-status-code)  "\\.")))
	(setq readable-status (string-trim readable-status))

	(setq class-string (format "
class %s(StorageResponseException):
    \"\"\"%s.\"\"\"

    storage_code = %s
    description = '%s'
    http_status_code = HTTPStatus\.%s.value
    readable_status = '%s'

" class class storage-code description http-status-code readable-status ))
        (delete-region start end)
	(insert class-string)))))

(define-key evil-normal-state-map (kbd "<SPC> `") 'amb-java-to-python-storage-errors)

(defun dy-set-fast-function (fn_name)
  "Set some function on <SPC> ` in evil normal state map."
  (interactive "aBind function name: ")
  (define-key evil-normal-state-map (kbd "<SPC> `") fn_name)
  )

;; https://protesilaos.com/codelog/2021-07-24-emacs-misc-custom-commands/
;; A variant of this is present in the crux.el package by Bozhidar
;; Batsov.
(defun dy-rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t)))


(defun dy-google-translate ()
  (interactive)
  (let* ((langs (google-translate-read-args nil nil))
         (source-language (car langs))
         (target-language (cadr langs))
	 (p1 (region-beginning))
	 (p2 (region-end)))
    (if (use-region-p)
	(google-translate-translate
	 source-language target-language
	 (buffer-substring-no-properties p1 p2))
      (google-translate-at-point))))


(defun dy-google-translate-reverse ()
  (interactive)
  (let* ((langs (google-translate-read-args nil nil))
         (source-language (cadr langs))
         (target-language (car langs))
	 (p1 (region-beginning))
	 (p2 (region-end)))
    (if (use-region-p)
	(google-translate-translate
	 source-language target-language
	 (buffer-substring-no-properties p1 p2))
      (google-translate-at-point-reverse))))

(defun dy-setup-hud-project ()
  "Set environment for hud project."
  (interactive)
  (progn
    (setenv "CMAKE_PREFIX_PATH" "/home/dyens/ros_catkin_ws/install_isolated:/home/dyens/Qt/6.2.0/gcc_64/lib/cmake")
    (setenv "LD_LIBRARY_PATH" "/home/dyens/ros_catkin_ws/install_isolated/lib::/usr/local/cuda/lib64:/usr/local/cuda/lib64")
    (setenv "PATH" "/home/dyens/ros_catkin_ws/install_isolated/bin:/home/dyens/.local/bin:/home/dyens/.poetry/bin:/home/dyens/.poetry/bin:/home/dyens/.cargo/bin:/home/dyens/.pyenv/bin:/home/dyens/.poetry/bin:/home/dyens/.local/bin:/home/dyens/.cargo/bin:/usr/lib64/qt-3.3/bin:/usr/share/Modules/bin:/usr/lib64/ccache:/home/dyens/.local/bin:/home/dyens/.poetry/bin:/home/dyens/.cargo/bin:/home/dyens/.pyenv/bin:/home/dyens/.poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/local/cuda/bin:/usr/local/go/go/bin:/home/dyens/bin:/usr/local/cuda/bin:/usr/local/go/go/bin")
    (setenv "PKG_CONFIG_PATH" "/home/dyens/ros_catkin_ws/install_isolated/lib/pkgconfig")
    (setenv "PYTHONPATH" "/home/dyens/ros_catkin_ws/install_isolated/lib/python3.9/site-packages")
    (setenv "ROS_ETC_DIR" "/home/dyens/ros_catkin_ws/install_isolated/etc/ros")
    (setenv "ROS_PACKAGE_PATH" "/home/dyens/ros_catkin_ws/install_isolated/share")
    (setenv "ROS_ROOT" "/home/dyens/ros_catkin_ws/install_isolated/share/ros")
    (setq default-directory "/home/dyens/dev/quantumsoft/catkin_ws/src/hud_data/src/")))


(defun dy-hud-cppcheck ()
  "Start cpp check for hud."
  (interactive)
  (projectile-with-default-dir (projectile-acquire-root)
    (async-shell-command
     "cd catkin_ws && cppcheck -q --enable=all --std=c++17  --inconclusive --project=src/compile_commands.json  --suppress=\"*:/home/dyens/ros_catkin_ws/*\" --suppress=\"*:devel/include/helm_msgs/*\" --suppress=\"unusedFunction:*\" -i build"
     "*hud-cppcheck*")))

(defun dy-hud-tidy ()
  "Start tidy for hud."
  (interactive)
  (projectile-with-default-dir (projectile-acquire-root)
    (async-shell-command
     "cd catkin_ws && find src -type d -name .ccls-cache -prune -o -name '*.cpp' -o -name '*.h' -print \
     | xargs clang-tidy -checks='*,-clang-analyzer-optin.cplusplus.VirtualCall,-llvmlibc-callee-namespace \
     ,-modernize-use-trailing-return-type,-llvmlibc-implementation-in-namespace,-modernize-use-trailing-return-type \
     ,-llvmlibc-restrict-system-libc-headers,-modernize-use-nodiscard,-altera-struct-pack-align \
     ,-fuchsia-default-arguments-declarations,-fuchsia-default-arguments-calls, \
     ,-cppcoreguidelines-special-member-functions,-hicpp-special-member-functions'"
     "*hud-tidy*")))

(defun dy-hud-clazy ()
  "Start clazy for hud."
  (interactive)
  (projectile-with-default-dir (projectile-acquire-root)
    (async-shell-command
     "cd catkin_ws && find src -type d -name .ccls-cache -prune -o -name '*.cpp' -o -name '*.h' -print | xargs /home/dyens/Qt/Tools/QtCreator/libexec/qtcreator/clang/bin/clazy-standalone"
     "*hud-clazy*")))


(defun dy-include-cpp-header ()
  "Include cpp header."
  (interactive)
  (save-excursion
    (let ((bname (replace-regexp-in-string "[.]" "_" (string-inflection-upcase-function (buffer-name)))))
      (goto-char (point-min))
      (insert (format "#ifndef %s\n#define %s\n\n" bname bname))
      (goto-char (point-max))
      (insert (format "\n#endif //%s" bname)))))


(defun dy-hud-tidy-check-one ()
  "Tidy check one file."
  (interactive)


  (projectile-with-default-dir (projectile-acquire-root)
    (async-shell-command
     (format "cd catkin_ws && clang-tidy %s" (buffer-file-name))
     "*hud-tidy-one-file*")))

;; cd catkin_ws && catkin_make install  -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=1 
;; cd catkin_ws && clang-tidy $(find src/hud_data/ -name "*.cpp" -not -path "*/msgs/*")  $(find src/hud_data/ -name "*.h" -not -path "*/msgs/*")
#+END_SRC
